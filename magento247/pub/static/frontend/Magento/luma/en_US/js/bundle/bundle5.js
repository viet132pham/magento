require.config({"config": {
        "jsbuild":{"PayPal_Braintree/js/view/payment/method-renderer/applepay-vault.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\ndefine([\n    'ko',\n    'jquery',\n    'underscore',\n    'Magento_Vault/js/view/payment/method-renderer/vault',\n    'Magento_Ui/js/model/messageList',\n    'PayPal_Braintree/js/view/payment/validator-handler',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'Magento_Checkout/js/model/full-screen-loader'\n], function (\n    ko,\n    $,\n    _,\n    VaultComponent,\n    globalMessageList,\n    validatorManager,\n    additionalValidators,\n    fullScreenLoader\n) {\n    'use strict';\n\n    return VaultComponent.extend({\n        defaults: {\n            active: false,\n            imports: {\n                onActiveChange: 'active'\n            },\n            template: 'PayPal_Braintree/applepay/vault',\n            validatorManager: validatorManager,\n            additionalData: {}\n        },\n\n        /**\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super().observe(['active']);\n            this.validatorManager.initialize();\n            return this;\n        },\n\n        /**\n         * Is payment option active?\n         *\n         * @returns {boolean}\n         */\n        isActive: function () {\n            let active = this.getId() === this.isChecked();\n\n            this.active(active);\n            return active;\n        },\n\n        /**\n         * Return the payment method code.\n         *\n         * @returns {string}\n         */\n        getCode: function () {\n            return 'braintree_applepay_vault';\n        },\n\n        /**\n         * Get last 4 digits of card.\n         *\n         * @returns {String}\n         */\n        getMaskedCard: function () {\n            return this.details.maskedCC;\n        },\n\n        /**\n         * Get expiration date.\n         *\n         * @returns {String}\n         */\n        getExpirationDate: function () {\n            return this.details.expirationDate;\n        },\n\n        /**\n         * Get card type.\n         *\n         * @returns {String}\n         */\n        getCardType: function () {\n            return this.details.type;\n        },\n\n        /**\n         * Get the ApplePay Card icons.\n         *\n         * @param type\n         * @return {*|boolean}\n         */\n        getApplePayIcons(type) {\n            let lowerCasedType = type.toLowerCase();\n\n            return window.checkoutConfig.payment.braintree_applepay.icons.hasOwnProperty(lowerCasedType) ?\n                window.checkoutConfig.payment.braintree_applepay.icons[lowerCasedType]\n                : false;\n        },\n\n        /**\n         * trigger Place order action.\n         *\n         * Set payment method nonce & place order.\n         */\n        triggerPlaceOrder: function () {\n            this.getPaymentMethodNonce();\n        },\n\n        /**\n         * Send request to get payment method nonce & places order.\n         */\n        getPaymentMethodNonce: function () {\n            let self = this;\n\n            fullScreenLoader.startLoader();\n            $.getJSON(self.nonceUrl, {\n                'public_hash': self.publicHash\n            }).done(function (response) {\n                fullScreenLoader.stopLoader();\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\n                self.placeOrder();\n            }).fail(function (response) {\n                let error = JSON.parse(response.responseText);\n\n                fullScreenLoader.stopLoader();\n                globalMessageList.addErrorMessage({\n                    message: error.message\n                });\n            });\n        },\n\n        /**\n         * Get payment method data.\n         *\n         * @returns {Object}\n         */\n        getData: function () {\n            let data = {\n                'method': this.code,\n                'additional_data': {\n                    'public_hash': this.publicHash\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n\n            return data;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/method-renderer/paypal-vault.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_Vault/js/view/payment/method-renderer/vault',\n    'Magento_Ui/js/model/messageList',\n    'Magento_Checkout/js/model/full-screen-loader'\n], function ($, _, VaultComponent, globalMessageList, fullScreenLoader) {\n    'use strict';\n\n    return VaultComponent.extend({\n        defaults: {\n            template: 'PayPal_Braintree/payment/paypal/vault',\n            additionalData: {}\n        },\n\n        /**\n         * Get PayPal payer email\n         * @returns {String}\n         */\n        getPayerEmail: function () {\n            return this.details.payerEmail;\n        },\n\n        /**\n         * Get type of payment\n         * @returns {String}\n         */\n        getPaymentIcon: function () {\n            return window.checkoutConfig.payment['braintree_paypal'].paymentIcon;\n        },\n\n        /**\n         * Place order\n         */\n        beforePlaceOrder: function () {\n            this.getPaymentMethodNonce();\n        },\n\n        /**\n         * Send request to get payment method nonce\n         */\n        getPaymentMethodNonce: function () {\n            var self = this;\n\n            fullScreenLoader.startLoader();\n            $.getJSON(self.nonceUrl, {\n                'public_hash': self.publicHash\n            })\n                .done(function (response) {\n                    fullScreenLoader.stopLoader();\n                    self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\n                    self.placeOrder();\n                })\n                .fail(function (response) {\n                    var error = JSON.parse(response.responseText);\n\n                    fullScreenLoader.stopLoader();\n                    globalMessageList.addErrorMessage({\n                        message: error.message\n                    });\n                });\n        },\n\n        /**\n         * Get payment method data\n         * @returns {Object}\n         */\n        getData: function () {\n            var data = {\n                'method': this.code,\n                'additional_data': {\n                    'public_hash': this.publicHash\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n\n            return data;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/method-renderer/paypal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_Checkout/js/view/payment/default',\n    'braintree',\n    'braintreeCheckoutPayPalAdapter',\n    'braintreePayPalCheckout',\n    'PayPal_Braintree/js/helper/format-amount',\n    'PayPal_Braintree/js/helper/remove-non-digit-characters',\n    'PayPal_Braintree/js/helper/replace-unsupported-characters',\n    'PayPal_Braintree/js/helper/get-cart-line-items-helper',\n    'Magento_Checkout/js/model/quote',\n    'Magento_Checkout/js/model/full-screen-loader',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'Magento_Checkout/js/model/step-navigator',\n    'Magento_Vault/js/view/payment/vault-enabler',\n    'Magento_Checkout/js/action/create-billing-address',\n    'Magento_Checkout/js/action/select-billing-address',\n    'Magento_CheckoutAgreements/js/view/checkout-agreements',\n    'mage/translate'\n], function (\n    $,\n    _,\n    Component,\n    braintree,\n    Braintree,\n    paypalCheckout,\n    formatAmount,\n    removeNonDigitCharacters,\n    replaceUnsupportedCharacters,\n    getCartLineItems,\n    quote,\n    fullScreenLoader,\n    additionalValidators,\n    stepNavigator,\n    VaultEnabler,\n    createBillingAddress,\n    selectBillingAddress,\n    checkoutAgreements,\n    $t\n) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/payment/paypal',\n            code: 'braintree_paypal',\n            active: false,\n            paypalInstance: null,\n            paymentMethodNonce: null,\n            grandTotalAmount: null,\n            isReviewRequired: false,\n            customerEmail: null,\n\n            /**\n             * Additional payment data\n             *\n             * {Object}\n             */\n            additionalData: {},\n\n            /**\n             * Line items array\n             *\n             * {Array}\n             */\n            lineItemsArray: [\n                'name',\n                'kind',\n                'quantity',\n                'unitAmount',\n                'productCode',\n                'description'\n            ],\n\n            /**\n             * PayPal client configuration\n             *\n             * {Object}\n             */\n            clientConfig: {\n                offerCredit: false,\n                offerCreditOnly: false,\n                dataCollector: {\n                    paypal: true\n                },\n\n                buttonPayPalId: 'braintree_paypal_placeholder',\n                buttonCreditId: 'braintree_paypal_credit_placeholder',\n                buttonPayLaterId: 'braintree_paypal_paylater_placeholder',\n\n                onDeviceDataReceived: function (deviceData) {\n                    this.additionalData['device_data'] = deviceData;\n                },\n\n                /**\n                 * Triggers when widget is loaded\n                 */\n                onReady: function () {\n                    this.setupPayPal();\n                },\n\n                /**\n                 * Triggers on payment nonce receive\n                 *\n                 * @param {Object} response\n                 */\n                onPaymentMethodReceived: function (response) {\n                    this.beforePlaceOrder(response);\n                }\n            },\n            imports: {\n                onActiveChange: 'active'\n            }\n        },\n\n        /**\n         * Set list of observable attributes\n         *\n         * @returns {exports.initObservable}\n         */\n        initObservable: function () {\n            let self = this;\n\n            this._super()\n                .observe(['active', 'isReviewRequired', 'customerEmail']);\n\n            window.addEventListener('hashchange', function (e) {\n                let methodCode = quote.paymentMethod();\n\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\n                    if (e.newURL.indexOf('payment') > 0 && self.grandTotalAmount !== null) {\n                        self.reInitPayPal();\n                    }\n                }\n            });\n\n            quote.paymentMethod.subscribe(function (value) {\n                let methodCode = value;\n\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\n                    self.reInitPayPal();\n                }\n            });\n\n            this.vaultEnabler = new VaultEnabler();\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\n            this.vaultEnabler.isActivePaymentTokenEnabler.subscribe(function () {\n                self.onVaultPaymentTokenEnablerChange();\n            });\n\n            this.grandTotalAmount = quote.totals()['base_grand_total'];\n\n            quote.totals.subscribe(function () {\n                if (self.grandTotalAmount !== quote.totals()['base_grand_total']) {\n                    self.grandTotalAmount = quote.totals()['base_grand_total'];\n                    let methodCode = quote.paymentMethod();\n\n                    if (methodCode &&\n                        (methodCode.method === 'braintree_paypal' || methodCode.method === 'braintree_paypal_vault')) {\n                        self.reInitPayPal();\n                    }\n                }\n            });\n\n            // for each component initialization need update property\n            this.isReviewRequired(false);\n            this.initClientConfig();\n\n            return this;\n        },\n\n        /**\n         * Get payment name\n         *\n         * @returns {String}\n         */\n        getCode: function () {\n            return this.code;\n        },\n\n        /**\n         * Get payment title\n         *\n         * @returns {String}\n         */\n        getTitle: function () {\n            return window.checkoutConfig.payment[this.getCode()].title;\n        },\n\n        /**\n         * Check if payment is active\n         *\n         * @returns {Boolean}\n         */\n        isActive: function () {\n            let active = this.getCode() === this.isChecked();\n\n            this.active(active);\n\n            return active;\n        },\n\n        /**\n         * Triggers when payment method change\n         *\n         * @param {Boolean} isActive\n         */\n        onActiveChange: function (isActive) {\n            if (!isActive) {\n                return;\n            }\n\n            // need always re-init Braintree with PayPal configuration\n            this.reInitPayPal();\n        },\n\n        /**\n         * Init config\n         */\n        initClientConfig: function () {\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\n\n            _.each(this.clientConfig, function (fn, name) {\n                if (typeof fn === 'function') {\n                    this.clientConfig[name] = fn.bind(this);\n                }\n            }, this);\n        },\n\n        /**\n         * Set payment nonce\n         *\n         * @param {String} paymentMethodNonce\n         */\n        setPaymentMethodNonce: function (paymentMethodNonce) {\n            this.paymentMethodNonce = paymentMethodNonce;\n        },\n\n        /**\n         * Update quote billing address\n         *\n         * @param {Object}customer\n         * @param {Object}address\n         */\n        setBillingAddress: function (customer, address) {\n            let billingAddress = {\n                street: [address.line1],\n                city: address.city,\n                postcode: address.postalCode,\n                countryId: address.countryCode,\n                email: customer.email,\n                firstname: customer.firstName,\n                lastname: customer.lastName,\n                telephone: removeNonDigitCharacters(_.get(customer, 'phone', '00000000000'))\n            };\n\n            billingAddress['region_code'] = typeof address.state === 'string' ? address.state : '';\n            billingAddress = createBillingAddress(billingAddress);\n            quote.billingAddress(billingAddress);\n        },\n\n        /**\n         * Prepare data to place order\n         *\n         * @param {Object} data\n         */\n        beforePlaceOrder: function (data) {\n            this.setPaymentMethodNonce(data.nonce);\n            this.customerEmail(data.details.email);\n            if (quote.isVirtual()) {\n                this.isReviewRequired(true);\n            } else if (this.isRequiredBillingAddress() === '1' || quote.billingAddress() === null) {\n                if (typeof data.details.billingAddress !== 'undefined') {\n                    this.setBillingAddress(data.details, data.details.billingAddress);\n                } else {\n                    this.setBillingAddress(data.details, data.details.shippingAddress);\n                }\n            } else if (quote.shippingAddress() === quote.billingAddress()) {\n                selectBillingAddress(quote.shippingAddress());\n            } else {\n                selectBillingAddress(quote.billingAddress());\n            }\n            this.placeOrder();\n        },\n\n        /**\n         * Re-init PayPal Auth Flow\n         */\n        reInitPayPal: function () {\n            this.disableButton();\n            this.clientConfig.paypal.amount = formatAmount(this.grandTotalAmount);\n\n            if (!quote.isVirtual()) {\n                this.clientConfig.paypal.enableShippingAddress = true;\n                this.clientConfig.paypal.shippingAddressEditable = false;\n                this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\n            }\n            // Send Line Items\n            this.clientConfig.paypal.lineItems = getCartLineItems();\n\n            Braintree.setConfig(this.clientConfig);\n\n            if (Braintree.getPayPalInstance()) {\n                Braintree.getPayPalInstance().teardown(function () {\n                    Braintree.setup();\n                });\n                Braintree.setPayPalInstance(null);\n            } else {\n                Braintree.setup();\n                this.enableButton();\n            }\n        },\n\n        /**\n         * Setup PayPal instance\n         */\n        setupPayPal: function () {\n            if (Braintree.config.paypalInstance) {\n                fullScreenLoader.stopLoader(true);\n                return;\n            }\n\n            paypalCheckout.create({\n                client: Braintree.clientInstance\n            }, function (createErr, paypalCheckoutInstance) {\n                if (createErr) {\n                    Braintree.showError(\n                        $t('PayPal Checkout could not be initialized. Please contact the store owner.'));\n                    console.error('paypalCheckout error', createErr);\n                    return;\n                }\n                let quoteObj = quote.totals(),\n                    configSDK = {\n                        components: 'buttons,messages,funding-eligibility',\n                        'enable-funding': this.isCreditEnabled() ? 'credit' : 'paylater',\n                        currency: quoteObj['base_currency_code']\n                    },\n                    buyerCountry = this.getMerchantCountry();\n\n                if (Braintree.getEnvironment() === 'sandbox' && buyerCountry !== null) {\n                    configSDK['buyer-country'] = buyerCountry;\n                }\n                paypalCheckoutInstance.loadPayPalSDK(configSDK, function () {\n                    this.loadPayPalButton(paypalCheckoutInstance, 'paypal');\n                    if (this.isCreditEnabled()) {\n                        this.loadPayPalButton(paypalCheckoutInstance, 'credit');\n                    }\n                    if (this.isPayLaterEnabled()) {\n                        this.loadPayPalButton(paypalCheckoutInstance, 'paylater');\n                    }\n\n                }.bind(this));\n            }.bind(this));\n        },\n\n        loadPayPalButton: function (paypalCheckoutInstance, funding) {\n            let paypalPayment = Braintree.config.paypal,\n                onPaymentMethodReceived = Braintree.config.onPaymentMethodReceived,\n                style = {\n                    label: Braintree.getLabel(funding),\n                    color: Braintree.getColor(funding),\n                    shape: Braintree.getShape(funding)\n                },\n                button,\n                events = Braintree.events,\n                payPalButtonId,\n                payPalButtonElement;\n\n            if (funding === 'credit') {\n                Braintree.config.buttonId = this.getCreditButtonId();\n            } else if (funding === 'paylater') {\n                Braintree.config.buttonId = this.getPayLaterButtonId();\n            } else {\n                Braintree.config.buttonId = this.getPayPalButtonId();\n            }\n\n            payPalButtonId = Braintree.config.buttonId;\n            payPalButtonElement = $('#' + Braintree.config.buttonId);\n            payPalButtonElement.html('');\n\n            // Render\n            Braintree.config.paypalInstance = paypalCheckoutInstance;\n\n            button = window.paypal.Buttons({\n                fundingSource: funding,\n                env: Braintree.getEnvironment(),\n                style: style,\n                commit: true,\n                locale: Braintree.config.paypal.locale,\n\n                onInit: function (data, actions) {\n                    let agreements = checkoutAgreements().agreements,\n                        shouldDisableActions = false;\n\n                    actions.disable();\n\n                    _.each(agreements, function (item) {\n                        if (checkoutAgreements().isAgreementRequired(item)) {\n                            let paymentMethodCode = quote.paymentMethod().method,\n                                inputId = '#agreement_' + paymentMethodCode + '_' + item.agreementId,\n                                inputEl = document.querySelector(inputId);\n\n                            if (!inputEl.checked) {\n                                shouldDisableActions = true;\n                            }\n\n                            inputEl.addEventListener('change', function () {\n                                if (additionalValidators.validate()) {\n                                    actions.enable();\n                                } else {\n                                    actions.disable();\n                                }\n                            });\n                        }\n                    });\n\n                    if (!shouldDisableActions) {\n                        actions.enable();\n                    }\n                },\n\n                createOrder: function () {\n                    return paypalCheckoutInstance.createPayment(paypalPayment).catch(function (err) {\n                        throw err.details.originalError.details.originalError.paymentResource;\n                    });\n                },\n\n                onCancel: function (data) {\n                    console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));\n\n                    if (typeof events.onCancel === 'function') {\n                        events.onCancel();\n                    }\n                },\n\n                onError: function (err) {\n                    if (err.errorName === 'VALIDATION_ERROR' && err.errorMessage.indexOf('Value is invalid') !== -1) {\n                        Braintree.showError(\n                            $t(\n                                'Address failed validation. Please check and confirm your City, State, and Postal Code'\n                            )\n                        );\n                    } else {\n                        Braintree.showError(\n                            $t('PayPal Checkout could not be initialized. Please contact the store owner.'));\n                    }\n                    Braintree.config.paypalInstance = null;\n                    console.error('Paypal checkout.js error', err);\n\n                    if (typeof events.onError === 'function') {\n                        events.onError(err);\n                    }\n                },\n\n                onClick: function (data) {\n                    if (!quote.isVirtual()) {\n                        this.clientConfig.paypal.enableShippingAddress = true;\n                        this.clientConfig.paypal.shippingAddressEditable = false;\n                        this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\n                    }\n\n                    // To check term & conditions input checked - validate additional validators.\n                    if (!additionalValidators.validate()) {\n                        return false;\n                    }\n\n                    if (typeof events.onClick === 'function') {\n                        events.onClick(data);\n                    }\n                }.bind(this),\n\n                onApprove: function (data) {\n                    return paypalCheckoutInstance.tokenizePayment(data)\n                        .then(function (payload) {\n                            onPaymentMethodReceived(payload);\n                        });\n                }\n            });\n\n            if (button.isEligible() && payPalButtonElement.length) {\n                button.render('#' + payPalButtonId).then(function () {\n                    Braintree.enableButton();\n                    if (typeof Braintree.config.onPaymentMethodError === 'function') {\n                        Braintree.config.onPaymentMethodError();\n                    }\n                }).then(function (data) {\n                    if (typeof events.onRender === 'function') {\n                        events.onRender(data);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get locale\n         *\n         * @returns {String}\n         */\n        getLocale: function () {\n            return window.checkoutConfig.payment[this.getCode()].locale;\n        },\n\n        /**\n         * Is Billing Address required from PayPal side\n         *\n         * @returns {exports.isRequiredBillingAddress|(function())|boolean}\n         */\n        isRequiredBillingAddress: function () {\n            return window.checkoutConfig.payment[this.getCode()].isRequiredBillingAddress;\n        },\n\n        /**\n         * Get configuration for PayPal\n         *\n         * @returns {Object}\n         */\n        getPayPalConfig: function () {\n            let totals = quote.totals(),\n                config = {},\n                isActiveVaultEnabler = this.isActiveVault();\n\n            config.paypal = {\n                flow: 'checkout',\n                amount: formatAmount(this.grandTotalAmount),\n                currency: totals['base_currency_code'],\n                locale: this.getLocale(),\n\n                /**\n                 * Triggers on any Braintree error\n                 */\n                onError: function () {\n                    this.paymentMethodNonce = null;\n                },\n\n                /**\n                 * Triggers if browser doesn't support PayPal Checkout\n                 */\n                onUnsupported: function () {\n                    this.paymentMethodNonce = null;\n                }\n            };\n\n            if (isActiveVaultEnabler) {\n                config.paypal.requestBillingAgreement = true;\n            }\n\n            if (!quote.isVirtual()) {\n                config.paypal.enableShippingAddress = true;\n                config.paypal.shippingAddressEditable = false;\n                config.paypal.shippingAddressOverride = this.getShippingAddress();\n            }\n\n            if (this.getMerchantName()) {\n                config.paypal.displayName = this.getMerchantName();\n            }\n\n            return config;\n        },\n\n        /**\n         * Get shipping address\n         *\n         * @returns {Object}\n         */\n        getShippingAddress: function () {\n            let address = quote.shippingAddress();\n\n            return {\n                recipientName: address.firstname + ' ' + address.lastname,\n                line1: address.street[0],\n                line2: typeof address.street[2] === 'undefined'\n                    ? address.street[1] : address.street[1] + ' ' + address.street[2],\n                city: address.city,\n                countryCode: address.countryId,\n                postalCode: address.postcode,\n                state: address.regionCode\n            };\n        },\n\n        /**\n         * Get merchant name\n         *\n         * @returns {String}\n         */\n        getMerchantName: function () {\n            return window.checkoutConfig.payment[this.getCode()]['merchantName'];\n        },\n\n        /**\n         * Get data\n         *\n         * @returns {Object}\n         */\n        getData: function () {\n            let data = {\n                'method': this.getCode(),\n                'additional_data': {\n                    'payment_method_nonce': this.paymentMethodNonce\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n\n            this.vaultEnabler.visitAdditionalData(data);\n\n            return data;\n        },\n\n        /**\n         * Returns payment acceptance mark image path\n         *\n         * @returns {String}\n         */\n        getPaymentAcceptanceMarkSrc: function () {\n            return window.checkoutConfig.payment[this.getCode()]['paymentAcceptanceMarkSrc'];\n        },\n\n        /**\n         * Get paypal vault payment method code\n         *\n         * @returns {String}\n         */\n        getVaultCode: function () {\n            return window.checkoutConfig.payment[this.getCode()]['vaultCode'];\n        },\n\n        /**\n         * Check if vault is active\n         *\n         * @returns {Boolean}\n         */\n        isActiveVault: function () {\n            return this.vaultEnabler.isVaultEnabled() && this.vaultEnabler.isActivePaymentTokenEnabler();\n        },\n\n        /**\n         * Re-init PayPal Auth flow to use Vault\n         */\n        onVaultPaymentTokenEnablerChange: function () {\n            this.clientConfig.paypal.singleUse = !this.isActiveVault();\n            this.reInitPayPal();\n        },\n\n        /**\n         * Disable submit button\n         */\n        disableButton: function () {\n            // stop any previous shown loaders\n            fullScreenLoader.stopLoader(true);\n            fullScreenLoader.startLoader();\n            $('[data-button=\"place\"]').attr('disabled', 'disabled');\n        },\n\n        /**\n         * Enable submit button\n         */\n        enableButton: function () {\n            $('[data-button=\"place\"]').removeAttr('disabled');\n            fullScreenLoader.stopLoader(true);\n        },\n\n        /**\n         * Triggers when customer click \"Continue to PayPal\" button\n         */\n        payWithPayPal: function () {\n            if (additionalValidators.validate()) {\n                Braintree.checkout.paypal.initAuthFlow();\n            }\n        },\n\n        /**\n         * Get PayPal button id\n         *\n         * @returns {String}\n         */\n        getPayPalButtonId: function () {\n            return this.clientConfig.buttonPayPalId;\n        },\n\n        /**\n         * Get Credit button id\n         *\n         * @returns {String}\n         */\n        getCreditButtonId: function () {\n            return this.clientConfig.buttonCreditId;\n        },\n\n        /**\n         * Get Pay Later button id\n         *\n         * @returns {String}\n         */\n        getPayLaterButtonId: function () {\n            return this.clientConfig.buttonPayLaterId;\n        },\n\n        /**\n         * Check if Pay Later enabled\n         *\n         * @returns {*}\n         */\n        isPayLaterEnabled: function () {\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['isActive'];\n        },\n\n        /**\n         * Check if Pay Later messaging enabled\n         *\n         * @returns {*}\n         */\n        isPayLaterMessageEnabled: function () {\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['isMessageActive'];\n        },\n\n        /**\n         * Get grand total\n         *\n         * @returns {string}\n         */\n        getGrandTotalAmount: function () {\n            return formatAmount(this.grandTotalAmount);\n        },\n\n        /**\n         * Check if PayPal Credit enabled\n         *\n         * @returns {*}\n         */\n        isCreditEnabled: function () {\n            return window.checkoutConfig.payment['braintree_paypal_credit']['isActive'];\n        },\n\n        /**\n         * Get Message Layout\n         *\n         * @returns {string}\n         */\n        getMessagingLayout: function () {\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['layout'];\n        },\n\n        /**\n         * Get Message Logo\n         *\n         * @returns {string}\n         */\n        getMessagingLogo: function () {\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['logo'];\n        },\n\n        /**\n         * Get Message Logo position\n         *\n         * @returns {string}\n         */\n        getMessagingLogoPosition: function () {\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['logo_position'];\n        },\n\n        /**\n         * Get Message Text Color\n         *\n         * @returns {string}\n         */\n        getMessagingTextColor: function () {\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['text_color'];\n        },\n\n        /**\n         * Get merchant country\n         *\n         * @returns {*}\n         */\n        getMerchantCountry: function () {\n            return window.checkoutConfig.payment[this.getCode()]['merchantCountry'];\n        },\n\n        /**\n         * Regex to replace all unsupported characters.\n         *\n         * @param str\n         */\n        replaceUnsupportedCharacters: function (str) {\n            // eslint-disable-next-line no-useless-escape\n            str.replace('/[^a-zA-Z0-9\\s\\-.\\']/', '');\n            return str.substr(0, 127);\n        },\n\n        /**\n         * Can send line items\n         *\n         * @returns {Boolean}\n         */\n        canSendLineItems: function () {\n            return window.checkoutConfig.payment[this.getCode()].canSendLineItems;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/method-renderer/venmo.js":"define(\n    [\n        'Magento_Checkout/js/view/payment/default',\n        'braintree',\n        'braintreeDataCollector',\n        'braintreeVenmo',\n        'PayPal_Braintree/js/form-builder',\n        'Magento_Ui/js/model/messageList',\n        'Magento_Checkout/js/model/full-screen-loader',\n        'Magento_Checkout/js/model/payment/additional-validators',\n        'mage/translate',\n        'Magento_Vault/js/view/payment/vault-enabler',\n        'underscore'\n    ],\n    function (\n        Component,\n        braintree,\n        dataCollector,\n        venmo,\n        formBuilder,\n        messageList,\n        fullScreenLoader,\n        additionalValidators,\n        $t,\n        VaultEnabler,\n        _\n    ) {\n        'use strict';\n\n        return Component.extend({\n            defaults: {\n                deviceData: null,\n                paymentMethodNonce: null,\n                template: 'PayPal_Braintree/payment/venmo',\n                venmoInstance: null,\n                vaultEnabler: null\n            },\n\n            clickVenmoBtn: function () {\n                var self = this;\n\n                if (!additionalValidators.validate()) {\n                    return false;\n                }\n\n                if (!this.venmoInstance) {\n                    this.setErrorMsg($t('Venmo not initialized, please try reloading.'));\n                    return;\n                }\n\n                this.venmoInstance.tokenize(function (tokenizeErr, payload) {\n                    if (tokenizeErr) {\n                        if (tokenizeErr.code === 'VENMO_CANCELED') {\n                            self.setErrorMsg($t('Venmo app is not available or the payment flow was cancelled.'));\n                        } else if (tokenizeErr.code === 'VENMO_APP_CANCELED') {\n                            self.setErrorMsg($t('Venmo payment flow cancelled.'));\n                        } else {\n                            self.setErrorMsg(tokenizeErr.message);\n                        }\n                    } else {\n                        self.handleVenmoSuccess(payload);\n                    }\n                });\n            },\n\n            collectDeviceData: function (clientInstance, callback) {\n                var self = this;\n\n                dataCollector.create({\n                    client: clientInstance,\n                    paypal: true\n                }, function (dataCollectorErr, dataCollectorInstance) {\n                    if (dataCollectorErr) {\n                        return;\n                    }\n                    self.deviceData = dataCollectorInstance.deviceData;\n                    callback();\n                });\n            },\n\n            getClientToken: function () {\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\n            },\n\n            getCode: function () {\n                return 'braintree_venmo';\n            },\n\n            getData: function () {\n                let data = {\n                    'method': this.getCode(),\n                    'additional_data': {\n                        'payment_method_nonce': this.paymentMethodNonce,\n                        'device_data': this.deviceData\n                    }\n                };\n\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n                this.vaultEnabler.visitAdditionalData(data);\n\n                return data;\n            },\n\n            getPaymentMarkSrc: function () {\n                return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\n            },\n\n            getTitle: function () {\n                return 'Venmo';\n            },\n\n            handleVenmoSuccess: function (payload) {\n                this.setPaymentMethodNonce(payload.nonce);\n                this.placeOrder();\n            },\n\n            initialize: function () {\n                var self = this;\n\n                this._super();\n                this.vaultEnabler = new VaultEnabler();\n                this.vaultEnabler.setPaymentCode(this.getVaultCode());\n\n                this.vaultEnabler.isActivePaymentTokenEnabler.subscribe(function () {\n                    self.venmoInstance.teardown(function () {\n                        self.initVenmo();\n                    });\n\n                });\n                this.initVenmo();\n                return this;\n            },\n\n            isAllowed: function () {\n                return window.checkoutConfig.payment[this.getCode()].isAllowed;\n            },\n\n            setErrorMsg: function (message) {\n                messageList.addErrorMessage({\n                    message: message\n                });\n            },\n\n            setPaymentMethodNonce: function (nonce) {\n                this.paymentMethodNonce = nonce;\n            },\n\n            setVenmoInstance: function (instance) {\n                this.venmoInstance = instance;\n            },\n\n            isVaultEnabled: function () {\n                return this.vaultEnabler.isVaultEnabled();\n            },\n\n            /**\n             * @returns {String}\n             */\n            getVaultCode: function () {\n                return window.checkoutConfig.payment[this.getCode()].vaultCode;\n            },\n\n            getPaymentMethodUsage: function () {\n                return this.vaultEnabler.isActivePaymentTokenEnabler()\n                    ? 'multi_use'\n                    : 'single_use';\n            },\n\n            initVenmo: function () {\n                var self = this;\n\n                braintree.create({\n                    authorization: self.getClientToken()\n                }, function (clientError, clientInstance) {\n                    if (clientError) {\n                        this.setErrorMsg($t('Unable to initialize Braintree Client.'));\n                        return;\n                    }\n\n                    // Collect device data\n                    self.collectDeviceData(clientInstance, function () {\n                        // callback from collectDeviceData\n                        venmo.create({\n                            client: clientInstance,\n                            allowDesktop: true,\n                            allowDesktopWebLogin: true,\n                            mobileWebFallBack: true,\n                            paymentMethodUsage: self.getPaymentMethodUsage(),\n                            allowNewBrowserTab: false\n                        }, function (venmoErr, venmoInstance) {\n                            if (venmoErr) {\n                                self.setErrorMsg($t('Error initializing Venmo: %1').replace('%1', venmoErr));\n                                return;\n                            }\n\n                            if (!venmoInstance.isBrowserSupported()) {\n                                console.log('Browser does not support Venmo');\n                                return;\n                            }\n\n                            self.setVenmoInstance(venmoInstance);\n                        });\n                    });\n                });\n            }\n        });\n    }\n);\n","PayPal_Braintree/js/view/payment/method-renderer/googlepay-vault.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\ndefine([\n    'ko',\n    'jquery',\n    'underscore',\n    'Magento_Vault/js/view/payment/method-renderer/vault',\n    'Magento_Ui/js/model/messageList',\n    'PayPal_Braintree/js/view/payment/validator-handler',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'Magento_Checkout/js/model/full-screen-loader'\n], function (\n    ko,\n    $,\n    _,\n    VaultComponent,\n    globalMessageList,\n    validatorManager,\n    additionalValidators,\n    fullScreenLoader\n) {\n    'use strict';\n\n    return VaultComponent.extend({\n        defaults: {\n            active: false,\n            imports: {\n                onActiveChange: 'active'\n            },\n            template: 'PayPal_Braintree/googlepay/vault',\n            validatorManager: validatorManager,\n            additionalData: {}\n        },\n\n        /**\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super().observe(['active']);\n            this.validatorManager.initialize();\n            return this;\n        },\n\n        /**\n         * Is payment option active?\n         *\n         * @returns {boolean}\n         */\n        isActive: function () {\n            let active = this.getId() === this.isChecked();\n\n            this.active(active);\n            return active;\n        },\n\n        /**\n         * Return the payment method code.\n         *\n         * @returns {string}\n         */\n        getCode: function () {\n            return this.code;\n        },\n\n        /**\n         * Get last 4 digits of card.\n         *\n         * @returns {String}\n         */\n        getMaskedCard: function () {\n            return this.details.maskedCC;\n        },\n\n        /**\n         * Get expiration date.\n         *\n         * @returns {String}\n         */\n        getExpirationDate: function () {\n            return this.details.expirationDate;\n        },\n\n        /**\n         * Get card type.\n         *\n         * @returns {String}\n         */\n        getCardType: function () {\n            return this.details.type;\n        },\n\n        /**\n         * Get the Google Pay Card icons.\n         *\n         * @param type\n         * @return {*|boolean}\n         */\n        getGooglePayIcons: function (type) {\n            let lowerCasedType = type.toLowerCase();\n\n            return window.checkoutConfig.payment.braintree_googlepay.icons.hasOwnProperty(lowerCasedType) ?\n                window.checkoutConfig.payment.braintree_googlepay.icons[lowerCasedType]\n                : false;\n        },\n\n        /**\n         * trigger Place order action.\n         *\n         * Set payment method nonce & place order.\n         */\n        triggerPlaceOrder: function () {\n            this.getPaymentMethodNonce();\n        },\n\n        /**\n         * Send request to get payment method nonce & places order.\n         */\n        getPaymentMethodNonce: function () {\n            let self = this;\n\n            fullScreenLoader.startLoader();\n            $.getJSON(self.nonceUrl, {\n                'public_hash': self.publicHash\n            }).done(function (response) {\n                fullScreenLoader.stopLoader();\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\n                self.placeOrder();\n            }).fail(function (response) {\n                let error = JSON.parse(response.responseText);\n\n                fullScreenLoader.stopLoader();\n                globalMessageList.addErrorMessage({\n                    message: error.message\n                });\n            });\n        },\n\n        /**\n         * Get payment method data.\n         *\n         * @returns {Object}\n         */\n        getData: function () {\n            let data = {\n                'method': this.code,\n                'additional_data': {\n                    'public_hash': this.publicHash\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n\n            return data;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/method-renderer/venmo-vault.js":"/*browser:true*/\n\ndefine([\n    'ko',\n    'jquery',\n    'underscore',\n    'Magento_Vault/js/view/payment/method-renderer/vault',\n    'Magento_Ui/js/model/messageList',\n    'PayPal_Braintree/js/view/payment/validator-handler',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'Magento_Checkout/js/model/full-screen-loader'\n], function (\n    ko,\n    $,\n    _,\n    VaultComponent,\n    globalMessageList,\n    validatorManager,\n    additionalValidators,\n    fullScreenLoader\n) {\n    'use strict';\n\n    return VaultComponent.extend({\n        defaults: {\n            active: false,\n            imports: {\n                onActiveChange: 'active'\n            },\n            template: 'PayPal_Braintree/payment/venmo/vault',\n            validatorManager: validatorManager,\n            additionalData: {}\n        },\n\n        /**\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super().observe(['active']);\n            this.validatorManager.initialize();\n            return this;\n        },\n\n        /**\n         * Is payment option active?\n         *\n         * @returns {boolean}\n         */\n        isActive: function () {\n            let active = this.getId() === this.isChecked();\n\n            this.active(active);\n            return active;\n        },\n\n        /**\n         * Return the payment method code.\n         *\n         * @returns {string}\n         */\n        getCode: function () {\n            return 'braintree_venmo_vault';\n        },\n\n        /**\n         * Get venmo username\n         *\n         * @returns {String}\n         */\n        getVenmoUsername: function () {\n            return this.details.username;\n        },\n\n        /**\n         * Get the Venmo icon\n         *\n         * @param type\n         * @return {*|boolean}\n         */\n        getVenmoIcon() {\n            return window.checkoutConfig.payment.braintree_venmo.paymentMarkSrc;\n        },\n\n        /**\n         * trigger Place order action.\n         *\n         * Set payment method nonce & place order.\n         */\n        triggerPlaceOrder: function () {\n            this.getPaymentMethodNonce();\n        },\n\n        /**\n         * Send request to get payment method nonce & places order.\n         */\n        getPaymentMethodNonce: function () {\n            let self = this;\n\n            fullScreenLoader.startLoader();\n            $.getJSON(self.nonceUrl, {\n                'public_hash': self.publicHash\n            }).done(function (response) {\n                fullScreenLoader.stopLoader();\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\n                self.placeOrder();\n            }).fail(function (response) {\n                let error = JSON.parse(response.responseText);\n\n                fullScreenLoader.stopLoader();\n                globalMessageList.addErrorMessage({\n                    message: error.message\n                });\n            });\n        },\n\n        /**\n         * Get payment method data.\n         *\n         * @returns {Object}\n         */\n        getData: function () {\n            let data = {\n                'method': this.code,\n                'additional_data': {\n                    'public_hash': this.publicHash\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n\n            return data;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/method-renderer/ach-vault.js":"/*browser:true*/\ndefine([\n    'ko',\n    'jquery',\n    'underscore',\n    'Magento_Vault/js/view/payment/method-renderer/vault',\n    'Magento_Ui/js/model/messageList',\n    'PayPal_Braintree/js/view/payment/validator-handler',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'Magento_Checkout/js/model/full-screen-loader'\n], function (\n    ko,\n    $,\n    _,\n    VaultComponent,\n    globalMessageList,\n    validatorManager,\n    additionalValidators,\n    fullScreenLoader\n) {\n    'use strict';\n\n    return VaultComponent.extend({\n        defaults: {\n            active: false,\n            imports: {\n                onActiveChange: 'active'\n            },\n            template: 'PayPal_Braintree/payment/ach/vault',\n            validatorManager: validatorManager,\n            additionalData: {}\n        },\n\n        /**\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super().observe(['active']);\n            this.validatorManager.initialize();\n            return this;\n        },\n\n        /**\n         * Is payment option active?\n         *\n         * @returns {boolean}\n         */\n        isActive: function () {\n            let active = this.getId() === this.isChecked();\n\n            this.active(active);\n            return active;\n        },\n\n        /**\n         * Return the payment method code.\n         *\n         * @returns {String}\n         */\n        getCode: function () {\n            return 'braintree_ach_direct_debit_vault';\n        },\n\n        /**\n         * Get Bank Account last 4 digits.\n         *\n         * @returns {String}\n         */\n        getAccountNumberLastFourDigits: function () {\n            return this.details.last4;\n        },\n\n        /**\n         *\n         * Get bank's routing number\n         *\n         * @returns {String}\n         */\n        getRoutingNumber: function () {\n            return this.details.routingNumber;\n        },\n\n        /**\n         * Get the ACH icon.\n         *\n         * @return {String}\n         */\n        getPaymentIcon() {\n            return window.checkoutConfig.payment['braintree_ach_direct_debit'].paymentIcon;\n        },\n\n        /**\n         * Trigger Place order action.\n         *\n         * Set payment method nonce & place order.\n         */\n        triggerPlaceOrder: function () {\n            this.getPaymentMethodNonce();\n        },\n\n        /**\n         * Send request to get payment method nonce & places order.\n         */\n        getPaymentMethodNonce: function () {\n            let self = this;\n\n            fullScreenLoader.startLoader();\n            $.getJSON(self.nonceUrl, {\n                'public_hash': self.publicHash\n            }).done(function (response) {\n                fullScreenLoader.stopLoader();\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\n                self.placeOrder();\n            }).fail(function (response) {\n                let error = JSON.parse(response.responseText);\n\n                fullScreenLoader.stopLoader();\n                globalMessageList.addErrorMessage({\n                    message: error.message\n                });\n            });\n        },\n\n        /**\n         * Get payment method data.\n         *\n         * @returns {Object}\n         */\n        getData: function () {\n            let data = {\n                'method': this.code,\n                'additional_data': {\n                    'public_hash': this.publicHash\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n\n            return data;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/hosted-fields.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n\ndefine([\n    'jquery',\n    'PayPal_Braintree/js/view/payment/method-renderer/hosted-fields',\n    'PayPal_Braintree/js/validator',\n    'Magento_Ui/js/model/messageList',\n    'mage/translate',\n    'Magento_Checkout/js/model/full-screen-loader',\n    'Magento_Checkout/js/action/set-payment-information',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'PayPal_Braintree/js/view/payment/adapter'\n], function (\n    $,\n    Component,\n    validator,\n    messageList,\n    $t,\n    fullScreenLoader,\n    setPaymentInformationAction,\n    additionalValidators,\n    braintree\n) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/payment/multishipping/form'\n        },\n\n        /**\n         * Get list of available CC types\n         *\n         * @returns {Object}\n         */\n        getCcAvailableTypes: function () {\n            let availableTypes = validator.getAvailableCardTypes(),\n                billingCountryId;\n\n            billingCountryId = $('#multishipping_billing_country_id').val();\n\n            if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\n                return validator.collectTypes(\n                    availableTypes, validator.getCountrySpecificCardTypes(billingCountryId)\n                );\n            }\n\n            return availableTypes;\n        },\n\n        /**\n         * @override\n         */\n        handleNonce: function (payload) {\n            let self = this;\n\n            this.setPaymentMethodNonce(payload.nonce);\n            this.setCreditCardBin(payload.details.bin);\n\n            // place order on success validation\n            self.validatorManager.validate(self, function () {\n                return self.setPaymentInformation();\n            }, function () {\n                self.isProcessing = false;\n                self.paymentMethodNonce = null;\n                self.creditCardBin = null;\n            });\n        },\n\n        /**\n         * @override\n         */\n        placeOrder: function () {\n            if (this.isProcessing) {\n                return false;\n            }\n            this.isProcessing = true;\n\n\n            braintree.tokenizeHostedFields();\n            return false;\n        },\n\n        /**\n         * @override\n         */\n        getData: function () {\n            let data = this._super();\n\n            data['additional_data']['is_active_payment_token_enabler'] = true;\n\n            return data;\n        },\n\n        /**\n         * @override\n         */\n        setPaymentInformation: function () {\n            if (additionalValidators.validate()) {\n                fullScreenLoader.startLoader();\n                $.when(\n                    setPaymentInformationAction(\n                        this.messageContainer,\n                        this.getData()\n                    )\n                ).done(this.done.bind(this))\n                    .fail(this.fail.bind(this));\n            }\n        },\n\n        /**\n         * {Function}\n         */\n        fail: function () {\n            fullScreenLoader.stopLoader();\n\n            return this;\n        },\n\n        /**\n         * {Function}\n         */\n        done: function () {\n            fullScreenLoader.stopLoader();\n            $('#multishipping-billing-form').trigger('submit');\n\n            return this;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/paypal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\ndefine([\n    'jquery',\n    'underscore',\n    'braintreeCheckoutPayPalAdapter',\n    'Magento_Checkout/js/model/quote',\n    'PayPal_Braintree/js/view/payment/method-renderer/paypal',\n    'PayPal_Braintree/js/helper/format-amount',\n    'Magento_Checkout/js/action/set-payment-information',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'Magento_Checkout/js/model/full-screen-loader',\n    'mage/translate'\n], function (\n    $,\n    _,\n    Braintree,\n    quote,\n    Component,\n    formatAmount,\n    setPaymentInformationAction,\n    additionalValidators,\n    fullScreenLoader,\n    $t\n) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/payment/multishipping/paypal',\n            submitButtonSelector: '[id=\"parent-payment-continue\"]',\n            reviewButtonHtml: ''\n        },\n\n        /**\n         * @override\n         */\n        initObservable: function () {\n            this.reviewButtonHtml = $(this.submitButtonSelector).html();\n            return this._super();\n        },\n\n        initClientConfig: function () {\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\n            this.clientConfig.paypal.enableShippingAddress = false;\n\n            _.each(this.clientConfig, function (fn, name) {\n                if (typeof fn === 'function') {\n                    this.clientConfig[name] = fn.bind(this);\n                }\n            }, this);\n            this.clientConfig.buttonPayPalId = 'parent-payment-continue';\n        },\n\n        /**\n         * @override\n         */\n        onActiveChange: function (isActive) {\n            this.updateSubmitButtonHtml(isActive);\n            this._super(isActive);\n        },\n\n        /**\n         * @override\n         */\n        beforePlaceOrder: function (data) {\n            this._super(data);\n        },\n\n        /**\n         * Re-init PayPal Auth Flow\n         */\n        reInitPayPal: function () {\n            this.disableButton();\n            this.clientConfig.paypal.amount = formatAmount(this.grandTotalAmount);\n\n            if (!quote.isVirtual()) {\n                this.clientConfig.paypal.enableShippingAddress = false;\n                this.clientConfig.paypal.shippingAddressEditable = false;\n            }\n\n            Braintree.setConfig(this.clientConfig);\n\n            if (Braintree.getPayPalInstance()) {\n                Braintree.getPayPalInstance().teardown(function () {\n                    Braintree.setup();\n                });\n                Braintree.setPayPalInstance(null);\n            } else {\n                Braintree.setup();\n                this.enableButton();\n            }\n        },\n\n        loadPayPalButton: function (paypalCheckoutInstance, funding) {\n            if (funding === 'credit') {\n                Braintree.config.buttonId = this.getCreditButtonId();\n            } else if (funding === 'paylater') {\n                Braintree.config.buttonId = this.getPayLaterButtonId();\n            } else {\n                Braintree.config.buttonId = this.getPayPalButtonId();\n            }\n\n            let paypalPayment = Braintree.config.paypal,\n                onPaymentMethodReceived = Braintree.config.onPaymentMethodReceived,\n                style = {\n                    label: Braintree.getLabel(funding),\n                    color: Braintree.getColor(funding),\n                    shape: Braintree.getShape(funding)\n                },\n                payPalButtonId = Braintree.config.buttonId,\n                payPalButtonElement = $('#' + Braintree.config.buttonId),\n                events = Braintree.events,\n\n                button = window.paypal.Buttons({\n                    fundingSource: funding,\n                    env: Braintree.getEnvironment(),\n                    style: style,\n                    commit: true,\n                    locale: Braintree.config.paypal.locale,\n\n                    createOrder: function () {\n                        return paypalCheckoutInstance.createPayment(paypalPayment);\n                    },\n\n                    onCancel: function (data) {\n                        console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));\n\n                        if (typeof events.onCancel === 'function') {\n                            events.onCancel();\n                        }\n                    },\n\n                    onError: function (err) {\n                        let error = 'PayPal Checkout could not be initialized. Please contact the store owner.';\n\n                        Braintree.showError($t(error));\n                        Braintree.config.paypalInstance = null;\n                        console.error('Paypal checkout.js error', err);\n\n                        if (typeof events.onError === 'function') {\n                            events.onError(err);\n                        }\n                    },\n\n                    onClick: function (data) {\n                    // To check term & conditions input checked - validate additional validators.\n                        if (!additionalValidators.validate()) {\n                            return false;\n                        }\n\n                        if (typeof events.onClick === 'function') {\n                            events.onClick(data);\n                        }\n                    },\n\n                    onApprove: function (data) {\n                        return paypalCheckoutInstance.tokenizePayment(data)\n                            .then(function (payload) {\n                                onPaymentMethodReceived(payload);\n                            });\n                    }\n                });\n\n            payPalButtonElement.html('');\n\n            // Render\n            Braintree.config.paypalInstance = paypalCheckoutInstance;\n\n            if (button.isEligible() && payPalButtonElement.length) {\n                button.render('#' + payPalButtonId).then(function () {\n                    Braintree.enableButton();\n                    if (typeof Braintree.config.onPaymentMethodError === 'function') {\n                        Braintree.config.onPaymentMethodError();\n                    }\n                }).then(function (data) {\n                    if (typeof events.onRender === 'function') {\n                        events.onRender(data);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get configuration for PayPal\n         *\n         * @returns {Object}\n         */\n        getPayPalConfig: function () {\n            let totals = quote.totals(),\n                config = {};\n\n            config.paypal = {\n                flow: 'checkout',\n                amount: formatAmount(this.grandTotalAmount),\n                currency: totals['base_currency_code'],\n                locale: this.getLocale(),\n                requestBillingAgreement: true,\n\n                /**\n                 * Triggers on any Braintree error\n                 */\n                onError: function () {\n                    this.paymentMethodNonce = null;\n                },\n\n                /**\n                 * Triggers if browser doesn't support PayPal Checkout\n                 */\n                onUnsupported: function () {\n                    this.paymentMethodNonce = null;\n                }\n            };\n\n            if (!quote.isVirtual()) {\n                config.paypal.enableShippingAddress = false;\n                config.paypal.shippingAddressEditable = false;\n            }\n\n            if (this.getMerchantName()) {\n                config.paypal.displayName = this.getMerchantName();\n            }\n\n            return config;\n        },\n\n        /**\n         * Get shipping address\n         *\n         * @returns {{}}\n         */\n        getShippingAddress: function () {\n            return {};\n        },\n\n        /**\n         * @override\n         */\n        getData: function () {\n            let data = this._super();\n\n            data['additional_data']['is_active_payment_token_enabler'] = true;\n\n            return data;\n        },\n\n        /**\n         * @override\n         */\n        isActiveVault: function () {\n            return true;\n        },\n\n        /**\n         * Checks if payment method nonce is already received.\n         *\n         * @returns {Boolean}\n         */\n        isPaymentMethodNonceReceived: function () {\n            return this.paymentMethodNonce !== null;\n        },\n\n        /**\n         * Update submit button on multi-addresses checkout billing form.\n         *\n         * @param {Boolean} isActive\n         */\n        updateSubmitButtonHtml: function (isActive) {\n            $(this.submitButtonSelector).removeClass('primary');\n            if (this.isPaymentMethodNonceReceived() || !isActive) {\n                $(this.submitButtonSelector).addClass('primary');\n                $(this.submitButtonSelector).html(this.reviewButtonHtml);\n            }\n        },\n\n        /**\n         * @override\n         */\n        placeOrder: function () {\n            if (!this.isPaymentMethodNonceReceived()) {\n                this.payWithPayPal();\n            } else {\n                fullScreenLoader.startLoader();\n\n                $.when(\n                    setPaymentInformationAction(\n                        this.messageContainer,\n                        this.getData()\n                    )\n                ).done(this.done.bind(this))\n                    .fail(this.fail.bind(this));\n            }\n        },\n\n        /**\n         * {Function}\n         */\n        fail: function () {\n            fullScreenLoader.stopLoader();\n\n            return this;\n        },\n\n        /**\n         * {Function}\n         */\n        done: function () {\n            fullScreenLoader.stopLoader();\n            $('#multishipping-billing-form').trigger('submit');\n\n            return this;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/express/express-paypal-paylater.js":"/**\n * Express PayLater button component\n */\ndefine([\n    'jquery',\n    'underscore',\n    'uiComponent',\n    'mage/url',\n    'domReady!'\n], function ($, _, Component, url) {\n    'use strict';\n\n    const config = _.get(window.checkoutConfig.payment, 'braintree_paypal_paylater', {});\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/express/express-paypal-paylater',\n            isActive: _.get(config, 'isActive', false),\n            checkoutCurrency: window.checkoutConfig.quoteData.base_currency_code,\n            checkoutAmount: window.checkoutConfig.quoteData.base_grand_total,\n            checkoutLocale: _.get(config, 'locale', null),\n            buttonLabel: _.get(config, ['style', 'label'], null),\n            buttonColor: _.get(config, ['style', 'color'], null),\n            buttonShape: _.get(config, ['style', 'shape'], null),\n            actionSuccess: url.build('braintree/paypal/review/'),\n            isMessageActive: _.get(config, 'isMessageActive', false),\n            messageTextColor: _.get(config ,['message', 'text_color'], null),\n            messageLayout: _.get(config ,['message', 'layout'], null),\n            messageLogoPosition: _.get(config ,['message', 'logo_position'], null),\n            messageLogo: _.get(config ,['message', 'logo'], null)\n        },\n\n        /**\n         * Initializes regular properties of instance.\n         *\n         * @returns {Object} Chainable.\n         */\n        initConfig: function () {\n            this._super();\n\n            return this;\n        },\n\n        /**\n         * Is the payment method active.\n         *\n         * @return {boolean}\n         */\n        isMethodActive: function () {\n            return this.isActive;\n        },\n\n        /**\n         * Is the payment method message active.\n         *\n         * @return {boolean}\n         */\n        isMethodMessageActive: function () {\n            return this.isMessageActive;\n        },\n\n        /**\n         * Is Billing address required.\n         *\n         * @return {string}\n         */\n        getIsRequiredBillingAddress: function () {\n            return _.get(config, 'isRequiredBillingAddress', '0') === '0' ? '' : 'true';\n        },\n\n        /**\n         * Get the merchant's name config.\n         *\n         * @return {string}\n         */\n        getMerchantName: function () {\n            return _.get(config, 'merchantName', '');\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/express/express-googlepay.js":"/**\n * Express GooglePay button component\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiComponent',\n    'mage/url',\n    'PayPal_Braintree/js/googlepay/button',\n    'PayPal_Braintree/js/googlepay/api',\n    'domReady!'\n], function ($, _, Component, url, button, buttonApi) {\n    'use strict';\n\n    const config = _.get(window.checkoutConfig.payment, 'braintree_googlepay', {});\n\n    return Component.extend({\n\n        defaults: {\n            template: 'PayPal_Braintree/express/express-googlepay',\n            id: 'braintree-googlepay-express-payment',\n            isActive: !_.isEmpty(config),\n            clientToken: _.get(config, 'clientToken', null),\n            merchantId: _.get(config, 'merchantId', null),\n            currencyCode: window.checkoutConfig.quoteData.base_currency_code,\n            actionSuccess: url.build('braintree/googlepay/review/'),\n            amount: window.checkoutConfig.quoteData.base_grand_total,\n            environment: _.get(config, 'environment', 'TEST'),\n            cardTypes: _.get(config, 'cardTypes', []),\n            btnColor: _.get(config, 'btnColor', ''),\n            threeDSecure: null\n        },\n\n        /**\n         * Is the payment method active.\n         *\n         * @return {boolean}\n         */\n        isMethodActive: function () {\n            return this.isActive;\n        },\n\n        /**\n         * Get the 3D Secure config object.\n         *\n         * @return {\n        *   {\n        *      thresholdAmount: (number|*),\n        *      specificCountries: ([]|*),\n        *      challengeRequested: (boolean|*),\n        *      enabled: boolean\n        *   } ||\n        *   {\n        *      thresholdAmount: number,\n        *      specificCountries: *[],\n        *      challengeRequested: boolean,\n        *      enabled: boolean\n        *   }\n        * }\n         */\n        get3DSecureConfig: function () {\n            let secureConfig = _.get(window.checkoutConfig.payment, 'three_d_secure', {});\n\n            if (_.isEmpty(secureConfig)) {\n                return {\n                    'enabled': false,\n                    'challengeRequested': false,\n                    'thresholdAmount': 0.0,\n                    'specificCountries': [],\n                    'ipAddress': ''\n                };\n            }\n\n            return {\n                'enabled': true,\n                'challengeRequested': secureConfig.challengeRequested ,\n                'thresholdAmount': secureConfig.thresholdAmount,\n                'specificCountries': secureConfig.specificCountries,\n                'ipAddress': secureConfig.ipAddress\n            };\n        },\n\n        /**\n         * Initialize Google Pay express.\n         */\n        initGooglePayExpress: function () {\n            if (!this.isMethodActive()) {\n                return;\n            }\n\n            this.threeDSecure = this.get3DSecureConfig();\n\n            /* Add client token & environment to 3DS Config */\n            this.threeDSecure.clientToken = this.clientToken;\n            this.threeDSecure.environment = this.environment;\n\n            let api = new buttonApi();\n\n            api.setEnvironment(this.environment);\n            api.setCurrencyCode(this.currencyCode);\n            api.setClientToken(this.clientToken);\n            api.setMerchantId(this.merchantId);\n            api.setActionSuccess(this.actionSuccess);\n            api.setAmount(this.amount);\n            api.setCardTypes(this.cardTypes);\n            api.setBtnColor(this.btnColor);\n            api.setThreeDSecureValidatorConfig(this.threeDSecure);\n\n            // Attach the button\n            button.init(\n                document.getElementById(this.id),\n                api\n            );\n        },\n\n        /**\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n\n            return this;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/express/express-paypal-credit.js":"/**\n * Express Paypal Credit button component\n */\ndefine([\n    'jquery',\n    'underscore',\n    'uiComponent',\n    'mage/url',\n    'domReady!'\n], function ($, _, Component, url) {\n    'use strict';\n\n    const config = _.get(window.checkoutConfig.payment, 'braintree_paypal_credit', {});\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/express/express-paypal-credit',\n            isActive: _.get(config, 'isActive', false),\n            checkoutCurrency: window.checkoutConfig.quoteData.base_currency_code,\n            checkoutAmount: window.checkoutConfig.quoteData.base_grand_total,\n            checkoutLocale: _.get(config, 'locale', null),\n            buttonLabel: _.get(config, ['style', 'label'], null),\n            buttonColor: _.get(config, ['style', 'color'], null),\n            buttonShape: _.get(config, ['style', 'shape'], null),\n            actionSuccess: url.build('braintree/paypal/review/')\n        },\n\n        /**\n         * Initializes regular properties of instance.\n         *\n         * @returns {Object} Chainable.\n         */\n        initConfig: function () {\n            this._super();\n\n            return this;\n        },\n\n        /**\n         * Is the payment method active.\n         *\n         * @return {boolean}\n         */\n        isMethodActive: function () {\n            return this.isActive;\n        },\n\n        /**\n         * Is Billing address required.\n         *\n         * @return {string}\n         */\n        getIsRequiredBillingAddress: function () {\n            return _.get(config, 'isRequiredBillingAddress', '0') === '0' ? '' : 'true';\n        },\n\n        /**\n         * Get the merchant's name config.\n         *\n         * @return {string}\n         */\n        getMerchantName: function () {\n            return _.get(config, 'merchantName', '');\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/express/express-payment.js":"/**\n * General express payment component that initializes braintree payment buttons\n */\ndefine([\n    'jquery',\n    'uiComponent',\n    'domReady!'\n], function ($, Component) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/express/express-payment'\n        },\n\n        /**\n         * Initializes regular properties of instance.\n         *\n         * @returns {Object} Chainable.\n         */\n        initConfig: function () {\n            this._super();\n\n            return this;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/express/express-applepay.js":"/**\n * Braintree Apple Pay express payment method integration.\n **/\ndefine([\n    'underscore',\n    'uiComponent',\n    'PayPal_Braintree/js/applepay/button',\n    'PayPal_Braintree/js/applepay/api',\n    'PayPal_Braintree/js/helper/format-amount',\n    'mage/translate',\n    'mage/url',\n    'domReady!'\n], function (\n    _,\n    Component,\n    button,\n    buttonApi,\n    formatAmount,\n    $t,\n    url\n) {\n    'use strict';\n\n    const config = _.get(window.checkoutConfig.payment, 'braintree_applepay', {});\n\n    return Component.extend({\n\n        defaults: {\n            template: 'PayPal_Braintree/express/express-applepay',\n            id: 'braintree-applepay-express-payment',\n            isActive: !_.isEmpty(config),\n            clientToken: _.get(config, 'clientToken', null),\n            quoteId: window.checkoutConfig.quoteId,\n            displayName: _.get(config, 'merchantName', null),\n            actionSuccess: url.build('checkout/onepage/success'),\n            grandTotalAmount: window.checkoutConfig.quoteData.base_grand_total,\n            isLoggedIn: false,\n            storeCode: window.checkoutConfig.storeCode\n        },\n\n        /**\n         * Is the payment method active.\n         *\n         * @return {boolean}\n         */\n        isMethodActive: function () {\n            return this.isActive;\n        },\n\n        /**\n         * Initialize Apple Pay express.\n         */\n        initApplePayExpress: function () {\n            if (!this.isMethodActive() || !this.clientToken) {\n                return;\n            }\n\n            if (!this.displayName) {\n                this.displayName = $t('Store');\n            }\n\n            this.isLoggedIn = window.checkoutConfig.customer_is_guest === '1' ? 'true' : 'false';\n\n            let api = new buttonApi();\n\n            api.setGrandTotalAmount(formatAmount(this.grandTotalAmount));\n            api.setClientToken(this.clientToken);\n            api.setDisplayName(this.displayName);\n            api.setQuoteId(this.quoteId);\n            api.setActionSuccess(this.actionSuccess);\n            api.setIsLoggedIn(this.isLoggedIn);\n            api.setStoreCode(this.storeCode);\n\n            // Attach the button\n            button.init(\n                document.getElementById(this.id),\n                api\n            );\n        },\n\n        /**\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n\n            return this;\n        }\n    });\n});\n","PayPal_Braintree/js/view/payment/express/express-paypal.js":"/**\n * Express Paypal button component\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiComponent',\n    'mage/url',\n    'PayPal_Braintree/js/paypal/button',\n    'PayPal_Braintree/js/helper/get-cart-line-items-helper',\n    'domReady!'\n], function ($, _, Component, url, paypalButton, getCartLineItems) {\n    'use strict';\n\n    const config = _.get(window.checkoutConfig.payment, 'braintree_paypal', {});\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/express/express-paypal',\n            isActive: _.get(config, 'isActive', false),\n            clientToken: _.get(config, 'clientToken', null),\n            checkoutCurrency: window.checkoutConfig.quoteData.base_currency_code,\n            checkoutAmount: window.checkoutConfig.quoteData.base_grand_total,\n            checkoutLocale: _.get(config, 'locale', null),\n            buttonLabel: _.get(config, ['style', 'label'], null),\n            buttonColor: _.get(config, ['style', 'color'], null),\n            buttonShape: _.get(config, ['style', 'shape'], null),\n            actionSuccess: url.build('braintree/paypal/review/')\n        },\n\n        /**\n         * Initializes regular properties of instance.\n         *\n         * @returns {Object} Chainable.\n         */\n        initConfig: function () {\n            this._super();\n\n            return this;\n        },\n\n        /**\n         * Is the payment method active.\n         *\n         * @return {boolean}\n         */\n        isMethodActive: function () {\n            return this.isActive;\n        },\n\n        /**\n         * Is Billing address required.\n         *\n         * @return {string}\n         */\n        getIsRequiredBillingAddress: function () {\n            return _.get(config, 'isRequiredBillingAddress', '0') === '0' ? '' : 'true';\n        },\n\n        /**\n         * Get the merchant's name config.\n         *\n         * @return {string}\n         */\n        getMerchantName: function () {\n            return _.get(config, 'merchantName', '');\n        },\n\n        /**\n         * Initialize Braintree PayPal buttons.\n         *\n         * PayPal Credit & PayPal Pay Later & PayPal Pay Later Messaging rely on PayPal to be enabled.\n         */\n        initPayPalButtons: function () {\n            if (!this.isMethodActive() || !this.clientToken) {\n                return;\n            }\n\n            let buttonConfig = {\n                    'clientToken': this.clientToken,\n                    'currency': this.checkoutCurrency,\n                    'environment': config.environment,\n                    'merchantCountry': config.merchantCountry,\n                    'isCreditActive': _.get(window.checkoutConfig.payment,\n                        ['braintree_paypal_credit', 'isActive'], false)\n                },\n\n                cartLineItems = getCartLineItems();\n\n            paypalButton.init(\n                buttonConfig,\n                JSON.stringify(cartLineItems)\n            );\n        }\n    });\n});\n","PayPal_Braintree/js/reCaptcha/webapiReCaptchaRegistry-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    return function (originalFunction) {\n        /**\n         * {@inheritDoc}\n         */\n        originalFunction.addListener = function (id , func) {\n            this._listeners[id] = func;\n        };\n\n        return originalFunction;\n    };\n});\n","PayPal_Braintree/js/customer/utilities.js":"/* eslint-disable max-depth */\ndefine([\n    'jquery',\n    'ko',\n    'mage/url',\n    'mage/translate',\n    'mage/calendar'\n], function ($, ko, urlBuilder) {\n    'use strict';\n    return {\n\n        viewModel: {\n            activeVM: ko.observableArray(null),\n            pausedVM: ko.observableArray(null),\n            pendingVM: ko.observableArray(null),\n\n            updatedOrderEntityId: ko.observable(null),\n            showBanner: ko.observable(false),\n            errorModal: {\n                visible: ko.observable(false),\n                message: ko.observable(null)\n            }\n        },\n        sectionCounter: 0,\n\n        makeCall: function (url, verb, callback, viewModel) {\n            var self = this;\n\n            $.ajax({\n                url: urlBuilder.build(url),\n                contentType: 'application/json',\n                global: true,\n                type: verb,\n                showLoader: true,\n                cache: false,\n                success: function (response) {\n                    callback(response);\n                    self.handleSuccess(self.viewModel.updatedOrderEntityId());\n                },\n                error: function (xhr, status, error) {\n                    $('body').trigger('processStop');\n                    if (viewModel) {\n                        self.hideModal(viewModel);\n                    }\n\n                    self.handleError(xhr, status, error);\n                }\n            });\n        },\n\n        //Get entity ID from response json back from update\n        //After section updates, run this to find the updatedOrderEntityId value and add the class\n        //Find a div with that ID and add a class to it\n        handleSuccess: function (entity_id) {\n            var self = this,\n                successClass = 'updated-success',\n                orderItem = $('.repeat-order-id-' + entity_id),\n                parentContainer = orderItem.closest('.repeat-order');\n\n            // If there is another success message on an item then reset\n            if ($('.updated-success').length) {\n                $(this).removeClass(successClass);\n            }\n\n            orderItem.addClass(successClass);\n            parentContainer.addClass(successClass);\n\n            //Remove the class\n            //Set the entityid value back to null, so the success message is only shown once\n            setTimeout(function () {\n                orderItem.removeClass(successClass);\n                parentContainer.removeClass(successClass);\n                self.viewModel.updatedOrderEntityId(null);\n            }, 20000);\n        },\n\n        hideModal: function (viewModel) {\n            return viewModel.visible(false);\n        },\n\n        //Get a message relating to a particular response and show it on the page in a modal\n        handleError: function (xhr) {\n            this.viewModel.errorModal.message(JSON.parse(xhr.responseText).message);\n            this.viewModel.errorModal.visible(true);\n        },\n\n        formatDate: function (value, format) {\n            if (!format || typeof format == 'undefined') {\n                format = 'MM dd, yy';\n            }\n\n            return $.datepicker.formatDate(format, new Date(value));\n        },\n\n        formatCurrency: function (value) {\n            //If the price is a negative number, make it a positive number. eg -1.25 becomes 1.25\n            var formattedValue = Math.abs(value);\n\n            //Set number to 2 decimal places as it is a price\n            formattedValue = formattedValue.toFixed(2);\n\n            return formattedValue;\n        },\n\n        formatWeeks: function (value) {\n            var dayValue = value / 7;\n\n            return dayValue === 1 ? $.mage.__('Week') : dayValue + ' ' + $.mage.__('Weeks');\n        },\n\n        //Used for payment details as they are formatted as a string of json:\n        //eg '{\"type\":\"VI\",\"maskedCC\":\"1111\",\"expirationDate\":\"11\\/2022\"}'\n        parseStringtoJSON: function (string) {\n            var result = JSON.parse(string);\n\n            return result;\n        },\n\n        //Find the image url in the product.media_gallery_entries array\n        getImgUrl: function (data) {\n            var imgUrl,\n                i = 0,\n                j = 0,\n                dataLength = data.length;\n\n            for (i = 0; i < dataLength; i++) {\n\n                for (j = 0; j < data[i].types.length; j++) {\n                    if (data[i].types[j] === 'thumbnail') {\n                        imgUrl = data[i].file;\n\n                        break;\n                    }\n                }\n            }\n\n            return '/media/catalog/product' + imgUrl;\n        },\n\n        //Find the image label to be used as an alt tag in the product.media_gallery_entries array\n        getImgAltTag: function (data) {\n            var altTag,\n                i = 0,\n                j = 0,\n                dataLength = data.length;\n\n            for (i = 0; i < dataLength; i++) {\n\n                for (j = 0; j < data[i].types.length; j++) {\n                    altTag = this.updateAltTag(data[i].types[j]);\n\n                    if (data[i].types[j] === 'thumbnail') {\n\n                        if (data[i].label === null || data[i].label === '') {\n                            altTag = ' ';\n                        }\n                        else {\n                            altTag = data[i].label;\n                        }\n\n                        break;\n                    }\n                }\n            }\n\n            return altTag;\n        }\n    };\n});\n","PayPal_Braintree/js/customer/payment/braintree-card.js":"define([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'mage/translate',\n    'uiRegistry',\n    'braintreeThreeDSecure',\n    'Magento_Checkout/js/model/payment/additional-validators',\n    'PayPal_Braintree/js/helper/get-braintree-config',\n    'PayPal_Braintree/js/view/payment/adapter'\n], function (Component, $, ko, _,  $t, uiRegistry, threeDSecure, additionalValidators, getBraintreeConfig, braintree) {\n    'use strict';\n\n    /**\n     * braintree is not an instance of Component so we need to merge in our changes\n     * and return an instance of Component with the final merged object.\n     */\n    var uiC = _.extend(braintree, {\n        clientToken: null,\n        uiConfig: null,\n        paymentMethodNonce: null,\n        selectedCardType: null,\n\n        isValidCardNumber: false,\n        isValidExpirationDate: false,\n        isValidCvvNumber: false,\n\n        viewModel: {\n            paymentMethodNonce: ko.observable(null),\n            publicHash: ko.observable(null),\n            paymentMethodCode: 'braintree',\n            total: ko.observable(0),\n            isThreeDSecureEnabled: ko.observable(false),\n            selectedMethod: {\n                price: ko.observable(0)\n            },\n            errorMessage: ko.observable()\n        },\n\n        /**\n         * Additional payment data\n         *\n         * {Object}\n         */\n        additionalData: {},\n\n        /**\n         * @inheritDoc\n         */\n        initialize: async function (uiConfig) {\n            this._super().observe([\n                'selectedCardType'\n            ]);\n\n            await this.getBraintreeConfig();\n\n            this.uiConfig = uiConfig;\n            this.icons = uiConfig.icons;\n            this.cvvImage = uiConfig.cvvImage;\n            this.viewModel.isThreeDSecureEnabled(uiConfig.isThreeDSecureEnabled);\n            this.viewModel.total(parseFloat(uiConfig.amount).toFixed(2));\n\n            let self = this;\n\n            const elm = await this._waitForElm('#co-transparent-form-braintree');\n\n            if (elm) {\n                this.clientConfig = {\n                    additionalData: {},\n\n                    /**\n                     * Device data initialization\n                     * @param {String} deviceData\n                     */\n                    onDeviceDataReceived: function (deviceData) {\n                        this.additionalData['device_data'] = deviceData;\n                    },\n\n                    /**\n                     * Triggers on any Braintree error\n                     * @param {Object} response\n                     */\n                    onError: function (response) {\n                        self.showError($t('Please enter a valid card number, expiry date and CVV Number.'));\n                        throw response.message;\n                    },\n\n                    /**\n                     * Triggers when customer click \"Cancel\"\n                     */\n                    onCancelled: function () {\n                        self.showError($t('The process has been cancelled'));\n                    },\n\n                    onReady: function (context) {\n                        context.setupHostedFields();\n                    },\n\n                    /**\n                     * Allow a new nonce to be generated\n                     */\n                    onPaymentMethodError: function () {\n                        this.isProcessing = false;\n                    },\n\n                    /**\n                     * Set payment nonce\n                     * @param {String} paymentMethodNonce\n                     */\n                    setPaymentMethodNonce: function (paymentMethodNonce) {\n                        this.paymentMethodNonce = paymentMethodNonce;\n                    },\n\n\n                    /**\n                     * After Braintree instance initialization\n                     */\n                    onInstanceReady: function (instance) {\n                        instance.on('validityChange', self.onValidityChange.bind(self));\n                        instance.on('cardTypeChange', self.onCardTypeChange.bind(self));\n                    },\n\n                    id: 'co-transparent-form-braintree',\n\n                    hostedFields: {\n                        number: {\n                            selector: '#braintree_cc_number',\n                            placeholder: '4111 1111 1111 1111'\n                        },\n                        expirationDate: {\n                            selector: '#braintree_expirationDate',\n                            placeholder: $t('MM/YYYY')\n                        },\n                        cvv: {\n                            selector: '#braintree_cc_cid',\n                            placeholder: $t('000')\n                        }\n                    },\n\n                    styles: {\n                        'input': {\n                            'font-size': '14px',\n                            'color': '#3A3A3A'\n                        },\n                        ':focus': {\n                            'color': 'black'\n                        },\n                        '.valid': {\n                            'color': 'green'\n                        },\n                        '.invalid': {\n                            'color': 'red'\n                        }\n                    },\n\n                    onPaymentMethodReceived: function (response) {\n                        $.ajax({\n                            url: '/rest/default/V1/braintree/mine/payment/vault',\n                            type: 'POST',\n                            data: JSON.stringify({\n                                billingAddress: {},\n                                payment: {\n                                    payment_method_code: self.viewModel.paymentMethodCode,\n                                    payment_method_nonce: response.nonce,\n                                    device_data: this.additionalData.device_data\n                                }\n                            }),\n                            contentType:'application/json; charset=utf-8',\n                            success: function () {\n                                window.location.reload();\n                            },\n                            error: function (error) {\n                                $('body').trigger('processStop');\n                                console.warn(error.message);\n                            }\n                        });\n                    }\n                };\n\n                this.setConfig(this.clientConfig);\n                this.clientToken = uiConfig.clientToken;\n                this.setup();\n            }\n        },\n\n        /**\n         * Get list of card types\n         * @returns {Object}\n         */\n        getCcTypesMapper: function () {\n            return this.uiConfig.ccTypeMapper;\n        },\n\n        /**\n         * Find mage card type by Braintree type\n         * @param {String} type\n         * @param {Object} availableTypes\n         * @returns {*}\n         */\n        getMageCardType: function (type, availableTypes) {\n            var storedCardType = null,\n                mapper = this.getCcTypesMapper();\n\n            if (type && typeof mapper[type] !== 'undefined') {\n                storedCardType = mapper[type];\n\n                if (_.indexOf(availableTypes, storedCardType) !== -1) {\n                    return storedCardType;\n                }\n            }\n\n            return null;\n        },\n\n        getBraintreeConfig: function () {\n            return getBraintreeConfig()\n                .then(response => {\n                    this.merchantAccountId = response.data.storeConfig.braintree_merchant_account_id;\n                });\n        },\n\n        /**\n         * Triggers on Hosted Field changes\n         * @param {Object} event\n         * @returns {Boolean}\n         */\n        onValidityChange: function (event) {\n            // Handle a change in validation or card type\n            if (event.emittedBy === 'number') {\n                this.selectedCardType(null);\n\n                if (event.cards.length === 1) {\n                    this.isValidCardNumber = event.fields.number.isValid;\n                    this.selectedCardType(\n                        this.getMageCardType(event.cards[0].type, this.uiConfig.availableCardTypes));\n                    this.validateCardType();\n                } else {\n                    this.isValidCardNumber = event.fields.number.isValid;\n                    this.validateCardType();\n                }\n            }\n\n            // Other field validations\n            if (event.emittedBy === 'expirationDate') {\n                this.isValidExpirationDate = event.fields.expirationDate.isValid;\n            }\n            if (event.emittedBy === 'cvv') {\n                this.isValidCvvNumber = event.fields.cvv.isValid;\n            }\n        },\n\n        /**\n         * Triggers on Hosted Field card type changes\n         * @param {Object} event\n         * @returns {Boolean}\n         */\n        onCardTypeChange: function (event) {\n            if (event.cards.length === 1) {\n                this.selectedCardType(\n                    this.getMageCardType(event.cards[0].type, this.uiConfig.availableCardTypes)\n                );\n            } else {\n                this.selectedCardType(null);\n            }\n        },\n\n        _waitForElm: function (selector) {\n            return new Promise(resolve => {\n                if (document.querySelector(selector)) {\n                    return resolve(document.querySelector(selector));\n                }\n\n                const observer = new MutationObserver(() => {\n                    if (document.querySelector(selector)) {\n                        resolve(document.querySelector(selector));\n                        observer.disconnect();\n                    }\n                });\n\n                observer.observe(document.body, {\n                    childList: true,\n                    subtree: true\n                });\n            });\n        },\n\n        /**\n         * @inheritDoc\n         */\n        getClientToken: function () {\n            return this.clientToken;\n        },\n\n        /**\n         * Trigger order placing\n         */\n        placeOrderClick: function () {\n            if (this.validateFormFields() && additionalValidators.validate()) {\n                this.handleNonce();\n            }\n        },\n\n        /**\n         * Get jQuery selector\n         * @param {String} field\n         * @returns {String}\n         */\n        getSelector: function (field) {\n            return '#' + this.code + '_' + field;\n        },\n\n        /**\n         * Get card icons\n         *\n         * @param {String} type\n         * @returns {Object|Boolean}\n         */\n        getIcons: function (findType) {\n            return this.icons.find(({ type }) => type === findType);\n        },\n\n        /**\n         * Toggle invalid class on selector\n         * @param selector\n         * @param state\n         * @returns {boolean}\n         */\n        validateField: function (selector, state) {\n            var $selector = $(this.getSelector(selector)),\n                invalidClass = 'braintree-hosted-fields-invalid';\n\n            if (state === true) {\n                $selector.removeClass(invalidClass);\n                return true;\n            }\n\n            $selector.addClass(invalidClass);\n            return false;\n        },\n\n        /**\n         * Validate all fields\n         * @returns {boolean}\n         */\n        validateFormFields: function () {\n            return (this.validateCardType() && this.validateExpirationDate() && this.validateCvvNumber()) === true;\n        },\n\n        /**\n         * Validate current credit card type\n         * @returns {Boolean}\n         */\n        validateCardType: function () {\n            return this.validateField(\n                'cc_number',\n                this.isValidCardNumber\n            );\n        },\n\n        /**\n         * Validate current expiry date\n         * @returns {boolean}\n         */\n        validateExpirationDate: function () {\n            return this.validateField(\n                'expirationDate',\n                this.isValidExpirationDate === true\n            );\n        },\n\n        /**\n         * Validate current CVV field\n         * @returns {boolean}\n         */\n        validateCvvNumber: function () {\n            return this.validateField(\n                'cc_cid',\n                this.isValidCvvNumber === true\n            );\n        },\n\n        /**\n         * Get image for CVV\n         * @returns {String}\n         */\n        getCvvImageHtml: function () {\n            return '<img src=\"' + this.cvvImage +\n                '\" alt=\"' + $t('Card Verification Number Visual Reference') +\n                '\" title=\"' + $t('Card Verification Number Visual Reference') +\n                '\" />';\n        },\n\n        /**\n         * Prepare data to place order\n         */\n        handleNonce: function () {\n\n            $('body').trigger('processStart');\n            this.viewModel.errorMessage('');\n\n            let state = $.Deferred(),\n                addressBilling = uiRegistry.get('store-braintree-card-form.address'),\n                shippingId = addressBilling.addressModal.viewModel.currentShippingId(),\n\n                // If we have a shipping ID then get the selected address otherwise use the new address.\n                currentAddress = shippingId\n                    ? addressBilling.addressModal.viewModel.currentAddresses().find(function (address) {\n                        return address.id === shippingId;\n                    }) : {\n                        firstname: document.getElementById('firstname').value,\n                        lastname: document.getElementById('lastname').value,\n                        telephone: document.getElementById('telephone').value,\n                        street: [\n                            document.getElementById('street_1').value,\n                            document.getElementById('street_2').value\n                        ],\n                        city: document.getElementById('city').value,\n                        region: {\n                            region_code: document.getElementById('region_id').value\n                        },\n                        postcode: document.getElementById('zip').value,\n                        country_id: document.getElementById('country').value\n                    };\n\n            const billingAddress = {\n                givenName: currentAddress.firstname,\n                surname: currentAddress.lastname,\n                phoneNumber: currentAddress.telephone,\n                streetAddress: currentAddress.street[0],\n                extendedAddress: currentAddress.street[1],\n                locality: currentAddress.city,\n                region: currentAddress.region.region_code,\n                postalCode: currentAddress.postcode,\n                countryCodeAlpha2: currentAddress.country_id\n            };\n\n            this.hostedFieldsInstance\n                .tokenize({\n                    vault: true,\n                    billingAddress\n                }).then(function (payload) {\n                    this.viewModel.paymentMethodNonce(payload.nonce);\n                    let threeDSEnabled = this.viewModel.isThreeDSecureEnabled();\n\n                    const callback = () => {\n                        const nonce = this.viewModel.paymentMethodNonce();\n\n                        this.clientConfig.onPaymentMethodReceived({ nonce });\n                    };\n\n                    if (threeDSEnabled) {\n                        threeDSecure.create({\n                            version: 2,\n                            client: this.clientInstance\n                        }, function (threeDSecureErr, threeDSecureInstance) {\n                            if (threeDSecureErr) {\n                                console.warn(threeDSecureErr);\n                                return;\n                            }\n\n                            threeDSecureInstance.verifyCard({\n                                amount: this.viewModel.total(),\n                                nonce: payload.nonce,\n                                bin: payload.details.bin,\n                                cardAddChallengeRequested: true,\n                                vault: true,\n\n                                onLookupComplete: function (data, next) {\n                                    next();\n                                }\n                            }, function (err, response) {\n                                if (err) {\n                                    $('body').trigger('processStop');\n                                    this.viewModel.errorMessage($t('Please try again with another form of payment.'));\n                                    return state.reject($t('Please try again with another form of payment.'));\n                                }\n\n                                let liability = {\n                                    shifted: response.liabilityShifted,\n                                    shiftPossible: response.liabilityShiftPossible\n                                };\n\n                                if (liability.shifted || !liability.shifted && !liability.shiftPossible) {\n                                    this.viewModel.paymentMethodNonce(response.nonce);\n                                    state.resolve();\n\n                                    // Validation Passed\n                                    callback();\n\n                                } else {\n                                    // eslint-disable-next-line max-len\n                                    this.viewModel.errorMessage($t('We could not validate your payment method. Please try again with another form of payment.'));\n                                    $('body').trigger('processStop');\n                                    state.reject($t('Please try again with another form of payment.'));\n                                }\n                            }.bind(this));\n                        }.bind(this));\n                    } else {\n                        callback();\n                    }\n                }.bind(this))\n                .catch(function () {\n                    $('body').trigger('processStop');\n                });\n        }\n    });\n\n    return Component.extend(uiC);\n});\n","PayPal_Braintree/js/customer/payment/braintree-paypal.js":"define([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'PayPal_Braintree/js/view/payment/adapter',\n    'braintreePayPalCheckout',\n    'mage/translate'\n], function (Component, $, ko, _, braintree, paypalCheckout, $t) {\n    'use strict';\n\n    /**\n     * braintree is not an instance of Component so we need to merge in our changes\n     * and return an instance of Component with the final merged object.\n     */\n    var uiC = _.extend(braintree, {\n        clientToken: null,\n        uiConfig: null,\n        paymentMethodNonce: null,\n\n        viewModel: {\n            errorMessage: ko.observable()\n        },\n\n        /**\n         * @inheritDoc\n         */\n        initialize: function (uiConfig) {\n            this._super();\n\n            this.uiConfig = uiConfig;\n            this.merchantName = uiConfig.merchantName;\n            this.locale = uiConfig.locale;\n            this.currency = uiConfig.currency;\n            this.orderAmount = uiConfig.orderAmount;\n            const self = this;\n\n            this.clientConfig = {\n\n                additionalData: {},\n                buttonId: 'paypal_container',\n\n                /**\n                 * Device data initialization\n                 * @param {String} deviceData\n                 */\n                onDeviceDataReceived: function (deviceData) {\n                    this.additionalData['device_data'] = deviceData;\n                },\n\n                /**\n                 * Triggers when widget is loaded\n                 * @param {Object} context\n                 */\n                onReady: function (context) {\n                    paypalCheckout.create({\n                        client: context.clientInstance\n                    }, async function (paypalCheckoutErr, paypalCheckoutInstance) {\n                        self.setPayPalInstance(paypalCheckoutInstance);\n\n                        await paypalCheckoutInstance.loadPayPalSDK({\n                            vault: true\n                        });\n\n                        window.paypal.Buttons({\n                            fundingSource: window.paypal.FUNDING.PAYPAL,\n\n                            createBillingAgreement: function () {\n                                return paypalCheckoutInstance.createPayment({\n                                    flow: 'vault',\n\n                                    enableShippingAddress: false,\n                                    shippingAddressEditable: false,\n\n                                    amount: self.orderAmount,\n                                    currency: self.currency,\n                                    locale: self.locale\n                                });\n                            },\n\n                            onApprove: function (data) {\n                                $('body').trigger('processStart');\n                                return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {\n                                    if (err) {\n                                        $('body').trigger('processStop');\n                                        self.viewModel.errorMessage(\n                                            $t('Please try again with another form of payment.'));\n                                        return;\n                                    }\n\n                                    $.ajax({\n                                        url: '/rest/default/V1/braintree/mine/payment/vault',\n                                        type: 'POST',\n                                        data: JSON.stringify({\n                                            payment: {\n                                                payment_method_code: 'braintree_paypal',\n                                                payment_method_nonce: payload.nonce,\n                                                device_data: self.deviceData\n                                            }\n                                        }),\n                                        contentType:'application/json; charset=utf-8',\n                                        success: function () {\n                                            window.location.reload();\n                                        },\n                                        error: function (error) {\n                                            $('body').trigger('processStop');\n                                            console.warn(error.message);\n                                        }\n                                    });\n                                });\n                            },\n\n                            onCancel: function (data) {\n                                console.log('PayPal payment canceled', JSON.stringify(data, 0, 2));\n                            },\n\n                            onError: function (err) {\n                                console.error('PayPal error', err);\n                            }\n                        }).render('#paypal_container_account');\n                    });\n                },\n\n                /**\n                 * Triggers on any Braintree error\n                 * @param {Object} response\n                 */\n                onError: function (response) {\n                    self.showError($t('PayPal error msg'));\n                    throw response.message;\n                },\n\n                /**\n                 * Triggers when customer click \"Cancel\"\n                 */\n                onCancelled: function () {\n                    self.showError($t('The process has been cancelled'));\n                },\n\n                onPaymentMethodReceived: function (response) {\n                    self.paymentMethodNonce = response.nonce;\n                    $('#braintree-paypal-payment-method-nonce').val(response.nonce);\n                    $('#braintree-paypal-form').trigger('submit');\n                },\n\n                dataCollector: {\n                    paypal: true\n                },\n                paypal: {\n                    container: 'paypal_container_account',\n                    flow: 'vault',\n                    singleUse: false,\n                    amount: self.orderAmount,\n                    currency: self.currency,\n                    locale: self.locale,\n                    enableShippingAddress: false,\n                    displayName: self.merchantName,\n\n                    /**\n                     * Triggers on any Braintree error\n                     */\n                    onError: function () {\n                        this.paymentMethodNonce = null;\n                    },\n\n                    /**\n                     * Triggers if browser doesn't support PayPal Checkout\n                     */\n                    onUnsupported: function () {\n                        this.paymentMethodNonce = null;\n                    }\n                }\n            };\n\n            this.setConfig(this.clientConfig);\n            this.clientToken = uiConfig.clientToken;\n        },\n\n        /**\n         * @inheritDoc\n         */\n        getClientToken: function () {\n            return this.clientToken;\n        },\n\n        /**\n         * @returns {String}\n         */\n        getColor: function () {\n            return this.color;\n        },\n\n        /**\n         * @returns {String}\n         */\n        getShape: function () {\n            return this.shape;\n        },\n\n        /**\n         * @returns {String}\n         */\n        getLayout: function () {\n            return this.layout;\n        },\n\n        /**\n         * @returns {String}\n         */\n        getSize: function () {\n            return this.size;\n        },\n\n        /**\n         * @returns {String}\n         */\n        getEnvironment: function () {\n            return this.environment;\n        },\n\n        /**\n         * @returns {String}\n         */\n        getDisabledFunding: function () {\n            return this.disabledFunding;\n        },\n\n        /**\n         * Set the PayPal instance or null it by setting the value of the property.\n         *\n         * @param val\n         */\n        setPayPalInstance: function (val) {\n            this.paypalInstance = val;\n        },\n\n        /**\n         * Run the teardown script to remove the PayPal instance.\n         */\n        teardownPayPalInstance: function () {\n            if (this.paypalInstance) {\n                this.paypalInstance.teardown(function () {\n                    $('#paypal_container_account').empty();\n                });\n                this.paypalInstance = null;\n            }\n\n            window.dispatchEvent(new Event('paypal:reinit-express'));\n        }\n    });\n\n    return Component.extend(uiC);\n});\n","PayPal_Braintree/js/customer/payment/address-form-initializer.js":"define([\n    'jquery',\n    'uiComponent',\n    'ko',\n    'PayPal_Braintree/js/customer/modals/address-modal',\n    'mageUtils',\n    'Magento_Checkout/js/model/payment/additional-validators'\n], function (\n    $,\n    Component,\n    ko,\n    addressModal,\n    utils,\n    additionalValidators\n) {\n    'use strict';\n    return Component.extend({\n\n        defaults: {\n            template: 'Paypal_Braintree/customer/payment/address-wrapper',\n            addressModal: addressModal,\n            deliveryIntervals: ko.observableArray(null),\n            currentlySelectedInterval: ko.observable(null),\n            minDatePickerValue: 1,\n            standardDeliveryDays: 1,\n            baseUrl: ko.observable(),\n            updatedOrderEntityId: null,\n            countryId: 'GB',\n            submitBtnSelector: '#braintree_submit',\n            phoneNumberMaxLength: ko.observable(11),\n            phoneNumberMinLength: ko.observable(2),\n            phoneNumberMaxLengthErrorVisible: ko.observable(false),\n            phoneNumberMinLengthErrorVisible: ko.observable(false)\n        },\n\n        initialize: function () {\n            this._super();\n            let self = this;\n\n            additionalValidators.registerValidator({\n                validate: function () {\n                    const $form = $('#form-validate');\n\n                    $form.validation();\n                    return $form.validation('isValid');\n                }\n            });\n\n            fetch('/graphql', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    query: `{\n                        countries {\n                            full_name_locale,\n                            two_letter_abbreviation\n                        }\n                    }`\n                })\n            }).then(response => response.json()).then(response => {\n                const countries = response.data.countries || [];\n\n                countries.forEach(country => {\n                    self.addressModal.viewModel.countries.push({\n                        countryCode: country.two_letter_abbreviation,\n                        countryName: country.full_name_locale\n                    });\n                });\n            });\n        },\n\n        toggleSubmit: function (disable) {\n            var submitBtn = $(this.submitBtnSelector);\n\n            if (submitBtn.length) {\n                submitBtn.attr('disabled', disable);\n            }\n        },\n\n        showAddressModal: function (entity_id, groupedOrdersLength, shippingId, countryId) {\n            this.addressModal.viewModel.selectExistingVisible(true);\n            this.addressModal.viewModel.currentCountryId(this.countryId);\n            this.addressModal.showAddressModal(entity_id, groupedOrdersLength, shippingId, countryId);\n            let addressLength = this.addressModal.viewModel.currentAddresses().length;\n\n            this.addressModal.viewModel.newAddressFormVisible(addressLength === 0);\n            this.showLookupForm();\n            this.toggleSubmit(true);\n        },\n\n        showNewAddressForm: function () {\n            this.addressModal.toggleNewAddAddressForm(true);\n            if (this.addressModal.toggleNewAddAddressForm) {\n                document.getElementById('form-validate').style.display = 'block';\n            }\n            this.addressModal.viewModel.isLookup(false);\n\n            this.toggleSubmit(false);\n        },\n\n        showLookupForm: function () {\n            this.addressModal.toggleNewAddAddressForm(true);\n        },\n\n        showExistingSelector: function () {\n            this.addressModal.toggleNewAddAddressForm(false);\n            if (this.addressModal.toggleNewAddAddressForm) {\n                document.getElementById('form-validate').style.display = 'none';\n            }\n\n            this.toggleSubmit(false);\n        },\n\n        /**\n         * @param {*} postCode\n         * @param {*} countryId\n         * @param {Array} postCodesPatterns\n         * @return {Boolean}\n         */\n        validatePostCode: function (postCode, countryId) {\n            var pattern, regex,\n                patterns = window.checkout.postCodes[countryId];\n\n            this.validatedPostCodeExample = [];\n\n            if (!utils.isEmpty(postCode) && !utils.isEmpty(patterns)) {\n                for (pattern in patterns) {\n                    if (patterns.hasOwnProperty(pattern)) { //eslint-disable-line max-depth\n                        this.validatedPostCodeExample.push(patterns[pattern].example);\n                        regex = new RegExp(patterns[pattern].pattern);\n\n                        if (regex.test(postCode)) { //eslint-disable-line max-depth\n                            return true;\n                        }\n                    }\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        postcodeValidation: function (postcodeElement) {\n            var countryId = this.countryId,\n                validationResult,\n                warnMessage,\n                warnElement = $('.warning-postcode');\n\n            if (postcodeElement == null || postcodeElement.val() == null) {\n                return true;\n            }\n\n            warnElement.hide();\n            warnElement.text('');\n\n            validationResult = this.validatePostCode(postcodeElement.val(), countryId, []);\n\n            if (!validationResult) {\n                warnMessage = 'Please enter a valid post code.';\n\n                warnElement.show();\n                warnElement.text(warnMessage);\n\n                if (warnMessage) {\n                    warnElement.prev().addClass('input-postcode-error');\n                }\n            } else {\n                warnElement.prev().removeClass('input-postcode-error');\n            }\n\n            return validationResult;\n        }\n    });\n});\n","PayPal_Braintree/js/customer/payment/update-payment.js":"define([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'uiRegistry'\n], function (Component, $, ko, registry) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            addNewCardVM: {\n                visible: ko.observable(false)\n            },\n            addNewPayPalVM: {\n                visible: ko.observable(false)\n            },\n            errorModalVM: {\n                visible: ko.observable(false),\n                message: ko.observable(null),\n                header: ko.observable('Error')\n            }\n        },\n\n        /**\n         * Add the repeat order block to the frontend\n         */\n        initialize: function () {\n            this.modifyKnockoutRemovalBehaviour();\n\n            this._super();\n        },\n\n        /**\n         * By moving the billing address form inside of Knockout it\n         * conflicts with the mage.directoryRegionUpdater widget.\n         *\n         * Knockout will run a cleanData method that removes jQuery events so removes the region updater events\n         * so User's will no longer see the correct region fields.\n         */\n        modifyKnockoutRemovalBehaviour: function () {\n            const normalFunction = ko.utils.domNodeDisposal.cleanExternalData;\n\n            ko.utils.domNodeDisposal.cleanExternalData = function (node) {\n                if (node.id === 'country') {\n                    return;\n                }\n\n                normalFunction(node);\n            };\n        },\n\n        showAddCardModal: function () {\n            this.addNewCardVM.visible(true);\n\n            $('html, body').animate({scrollTop: 0}, 400);\n        },\n\n        hideAddCardModal: function () {\n            this.addNewCardVM.visible(false);\n        },\n\n        showAddPayPalModal: function () {\n            var braintreePaypal = registry.get('new-form-braintree-paypal');\n\n            braintreePaypal.setup();\n            this.addNewPayPalVM.visible(true);\n        },\n\n        hideAddPayPalModal: function () {\n            var braintreePaypal = registry.get('new-form-braintree-paypal');\n\n            braintreePaypal.teardownPayPalInstance();\n            this.addNewPayPalVM.visible(false);\n        }\n    });\n});\n","PayPal_Braintree/js/customer/modals/address-modal.js":"define([\n    'jquery',\n    'ko',\n    'PayPal_Braintree/js/customer/utilities',\n    'mageUtils'\n], function ($, ko, utilities, utils) {\n    'use strict';\n\n    return {\n        viewModel: {\n            visible: ko.observable(false),\n            newAddressFormVisible: ko.observable(false),\n            selectExistingVisible: ko.observable(false),\n            currentAddresses: ko.observableArray([]),\n            initialSubscriptionAddressId: ko.observable(null),\n            currentShippingId: ko.observable(null),\n            currentEntityId: ko.observable(null),\n            currentOrderIsGrouped: ko.observable(false),\n            useForSelected: ko.observable(false),\n            saveAddressDisabled: ko.observable(true),\n            confirmationVisibleType: ko.observable(null),\n            defaultForAllAddressId: ko.observable(null),\n            isLookup: ko.observable(true),\n            newAddress: {\n                firstName: document.getElementById('firstname').value,\n                lastName: document.getElementById('lastname').value,\n                street: document.getElementById('street_1').value,\n                street2: document.getElementById('street_2').value,\n                city: document.getElementById('city').value,\n                postcode: document.getElementById('zip').value,\n                country: document.getElementById('country').value,\n                telephone: document.getElementById('telephone').value,\n                region: document.getElementById('region_id').value\n            },\n            currentCountryId: ko.observable(null),\n            countries: ko.observableArray(null)\n        },\n\n        fetchAllAddressUrl: 'rest/V1/repeat-orders/user-addresses',\n        assignAddressUrl: 'rest/V1/repeat-orders/grouped/set-shipping-address/',\n        useForAllUrl: 'rest/V1/repeat-orders/set-shipping-address-for-all/',\n        addAddressUrl: 'rest/V1/repeat-orders/add-shipping-address/',\n        validatedPostCodeExample: [],\n\n        showAddressModal: function (entity_id, groupedOrdersLength, shippingId, countryId) {\n            var self = this;\n\n            this.viewModel.visible(true);\n            this.viewModel.selectExistingVisible(true);\n            this.viewModel.currentEntityId(entity_id);\n            this.viewModel.initialSubscriptionAddressId(shippingId);\n            this.viewModel.currentOrderIsGrouped(groupedOrdersLength > 1);\n            this.viewModel.useForSelected(false);\n            this.clearAddressField();\n\n            fetch('/graphql', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    query: `{\n                customer {\n                    addresses {\n                        id,\n                        street,\n                        country_id,\n                        region {\n                            region_code\n                        },\n                        telephone,\n                        postcode,\n                        firstname,\n                        lastname,\n                        city\n                    }\n                }\n              }`\n                })\n            }).then(response => response.json()).then(response => {\n                const addresses = response.data.customer?.addresses || [];\n\n                self.viewModel.currentAddresses.removeAll();\n\n                //Get addresses from response and put them in an observable array\n                //The template looks at the array and builds the <select> dropdown form\n                for (let i = 0; i < addresses.length; i++) {\n                    const address = {\n                        id: addresses[i].id,\n                        firstname: addresses[i].firstname,\n                        lastname: addresses[i].lastname,\n                        region: {\n                            region_code: addresses[i].region.region_code\n                        },\n                        telephone: addresses[i].telephone,\n                        postcode: addresses[i].postcode,\n                        country_id: addresses[i].country_id,\n                        city: addresses[i].city,\n                        street: addresses[i].street.join(', ')\n                    };\n\n                    self.viewModel.currentAddresses.push(address);\n                }\n\n                self.viewModel.currentShippingId(shippingId);\n                self.viewModel.currentCountryId(countryId);\n                self.viewModel.saveAddressDisabled(true);\n            });\n        },\n\n        hideAddressModal: function () {\n            this.viewModel.newAddressFormVisible(false);\n            this.viewModel.selectExistingVisible(false);\n            this.viewModel.confirmationVisibleType(null);\n            this.viewModel.visible(false);\n\n            // Remove previous clickToAddress initialization block\n            $('#cc_c2a').remove();\n        },\n\n        showConfirmChangeAddress: function (event, context, type) {\n            if (type === 'new') {\n                let form = $(event.target).closest('form');\n\n                if (!(form.validation() && form.validation('isValid'))) {\n                    return false;\n                }\n            }\n\n            this.viewModel.newAddressFormVisible(false);\n            this.viewModel.selectExistingVisible(false);\n            this.viewModel.confirmationVisibleType(type);\n        },\n\n        /**\n     * @param {*} postCode\n     * @param {*} countryId\n     * @return {Boolean}\n     */\n        validatePostCode: function (postCode, countryId) {\n            var pattern, regex,\n                patterns = window.checkout.postCodes[countryId];\n\n            this.validatedPostCodeExample = [];\n\n            if (!utils.isEmpty(postCode) && !utils.isEmpty(patterns)) {\n                for (pattern in patterns) {\n                    if (patterns.hasOwnProperty(pattern)) { //eslint-disable-line max-depth\n                        this.validatedPostCodeExample.push(patterns[pattern].example);\n                        regex = new RegExp(patterns[pattern].pattern);\n\n                        if (regex.test(postCode)) { //eslint-disable-line max-depth\n                            return true;\n                        }\n                    }\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        postcodeValidation: function (postcodeElement) {\n            var countryId = $('select[name=\"country\"]:visible').val(),\n                validationResult,\n                warnMessage,\n                warnElement = $('.warning-postcode');\n\n            if (postcodeElement == null || postcodeElement.val() == null) {\n                return true;\n            }\n\n            warnElement.hide();\n            warnElement.text('');\n\n            validationResult = this.validatePostCode(postcodeElement.val(), countryId, []);\n\n            if (!validationResult) {\n                warnMessage = 'Please enter a valid post code.';\n                warnElement.show();\n                warnElement.text(warnMessage);\n\n                if (warnMessage) {\n                    warnElement.prev().addClass('input-postcode-error');\n                }\n\n            } else {\n                warnElement.prev().removeClass('input-postcode-error');\n            }\n\n            return validationResult;\n        },\n\n        toggleNewAddAddressForm: function (show) {\n            this.viewModel.newAddressFormVisible(show);\n            this.viewModel.selectExistingVisible(!show);\n            this.viewModel.isLookup(show);\n            this.clearAddressField();\n        },\n\n        clearAddressField: function () {\n            $('#cc_c2a').remove();\n            this.viewModel.currentShippingId(null);\n            this.viewModel.newAddress.street = null;\n            this.viewModel.newAddress.street = null;\n            this.viewModel.newAddress.street2 = null;\n            this.viewModel.newAddress.city = null;\n            this.viewModel.newAddress.postcode = null;\n            this.viewModel.newAddress.telephone = null;\n            this.viewModel.newAddress.country = this.viewModel.currentCountryId();\n        },\n\n        updateCurrentAddressId: function () {\n            var current = this.viewModel.currentShippingId(),\n                initial = this.viewModel.initialSubscriptionAddressId();\n\n            this.viewModel.saveAddressDisabled(current === initial);\n            this.viewModel.useForSelected(false);\n        },\n\n        onUseForAllChange: function (type, event) {\n            if (event && event.target) {\n                this.viewModel.useForSelected(event.target.checked);\n            }\n\n            if (type === 'existing') {\n                let currentId = this.viewModel.currentShippingId(),\n                    initialId = this.viewModel.initialSubscriptionAddressId(),\n                    defaultForAll = this.viewModel.defaultForAllAddressId();\n\n                if (currentId === initialId && defaultForAll === currentId && this.viewModel.useForSelected()) {\n                    this.viewModel.saveAddressDisabled(!this.viewModel.saveAddressDisabled());\n                }\n            }\n\n            return true;\n        },\n\n        submitChanges: function (event) {\n            if (this.viewModel.confirmationVisibleType() === 'new') {\n                return this.submitNewAddress(event);\n            }\n\n            return this.submitExistingAddress();\n        },\n\n        submitExistingAddress: function () {\n            var self = this,\n                entityId = this.viewModel.currentEntityId(),\n                addressId = this.viewModel.currentShippingId(),\n                useForAll = this.viewModel.useForSelected(),\n                url = (useForAll ? this.useForAllUrl : this.assignAddressUrl + entityId + '/') + addressId,\n                verb = useForAll ? 'POST' : 'PUT';\n\n            utilities.makeCall(url, verb, function () {\n                self.hideAddressModal();\n                utilities.viewModel.updatedOrderEntityId(entityId);\n            }, self.viewModel);\n\n            return true;\n        },\n\n        submitNewAddress: function () {\n            var self = this,\n                entityId = this.viewModel.currentEntityId,\n                firstName = this.viewModel.newAddress.firstName,\n                lastName = this.viewModel.newAddress.lastName,\n                street = this.viewModel.newAddress.street,\n                city = this.viewModel.newAddress.city,\n                postcode = this.viewModel.newAddress.postcode,\n                country = this.viewModel.currentCountryId,\n                telephone = this.viewModel.newAddress.telephone,\n                url = this.addAddressUrl +\n          '?entityId=' + entityId +\n          '&firstName=' + firstName +\n          '&lastName=' + lastName +\n          '&street=' + street +\n          '&postcode=' + postcode +\n          '&city=' + city +\n          '&countryId=' + country +\n          '&telephone=' + telephone;\n\n            utilities.makeCall(\n                url,\n                'POST',\n                function (response) {\n                    self.viewModel.currentShippingId(response.id);\n                    self.submitExistingAddress();\n                }, self.viewModel);\n\n            return true;\n        }\n    };\n});\n","PayPal_Braintree/js/model/vault-enabler.js":"define([\n    'Magento_Vault/js/view/payment/vault-enabler'\n], function (VaultEnabler) {\n    'use strict';\n\n    return {\n        // Initialise a single VaultEnabler instance.\n        vaultEnabler: new VaultEnabler(),\n\n        /**\n         * @returns {VaultEnabler}\n         */\n        getVaultEnabler() {\n            return this.vaultEnabler;\n        },\n\n        /**\n         * Set the payment code against the vault enabler.\n         *\n         * @param {string} code\n         */\n        setPaymentCode(code) {\n            this.vaultEnabler.setPaymentCode(code);\n        },\n\n        /**\n         * Returns the vault enabled state.\n         *\n         * @returns {boolean}\n         */\n        isVaultEnabled() {\n            return this.vaultEnabler.isVaultEnabled();\n        },\n\n        /**\n         * Returns the active payment token enabler state.\n         *\n         * @returns {boolean}\n         */\n        isActivePaymentTokenEnabler() {\n            return this.vaultEnabler.isActivePaymentTokenEnabler();\n        },\n\n        /**\n         * @param {Object} data\n         */\n        visitAdditionalData(data) {\n            this.vaultEnabler.visitAdditionalData(data);\n        }\n    };\n});\n","PayPal_Braintree/js/model/step-navigator-mixin.js":"define([\n    'mage/utils/wrapper'\n], function (wrapper) {\n    'use strict';\n\n    let mixin = {\n        handleHash: function (originalFn) {\n            var hashString = window.location.hash.replace('#', '');\n\n            if (hashString.indexOf('venmo') > -1) {\n                return false;\n            }\n\n            return originalFn();\n        }\n    };\n\n    return function (target) {\n        return wrapper.extend(target, mixin);\n    };\n});\n","PayPal_Braintree/js/model/place-order-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* eslint-disable max-nested-callbacks */\n\ndefine([\n    'jquery',\n    'mage/utils/wrapper',\n    'Magento_ReCaptchaWebapiUi/js/webapiReCaptchaRegistry'\n], function ($, wrapper, recaptchaRegistry) {\n    'use strict';\n\n    return function (placeOrder) {\n        return wrapper.wrap(placeOrder, function (originalAction, serviceUrl, payload, messageContainer) {\n            var recaptchaDeferred;\n\n            if (recaptchaRegistry.triggers.hasOwnProperty('recaptcha-checkout-braintree')) {\n                //ReCaptcha is present for checkout\n                recaptchaDeferred = $.Deferred();\n                recaptchaRegistry.addListener('recaptcha-checkout-braintree', function (token) {\n                    //Add reCaptcha value to place-order request and resolve deferred with the API call results\n                    payload.xReCaptchaValue = token;\n                    originalAction(serviceUrl, payload, messageContainer).done(function () {\n                        recaptchaDeferred.resolve.apply(recaptchaDeferred, arguments);\n                    }).fail(function () {\n                        recaptchaDeferred.reject.apply(recaptchaDeferred, arguments);\n                    });\n                });\n                //Trigger ReCaptcha validation\n                recaptchaRegistry.triggers['recaptcha-checkout-braintree']();\n\n                if (!recaptchaRegistry._isInvisibleType.hasOwnProperty('recaptcha-checkout-braintree') ||\n                    recaptchaRegistry._isInvisibleType['recaptcha-checkout-braintree'] === false\n                ) {\n                    //remove listener so that place order action is only triggered by the 'Place Order' button\n                    recaptchaRegistry.removeListener('recaptcha-checkout-braintree');\n                }\n                return recaptchaDeferred;\n            }\n\n            //No ReCaptcha, just sending the request\n            return originalAction(serviceUrl, payload, messageContainer);\n        });\n    };\n});\n","PayPal_Braintree/js/model/full-screen-loader.js":"define([\n    'jquery',\n    'rjsResolver'\n], function ($, resolver) {\n    'use strict';\n\n    /**\n     * New full screen loader (spinner) implementation with configurable container.\n     * It can be used across website areas including checkout.\n     */\n    return {\n        container: 'body',\n\n        /**\n         * Set the container element with its ID to replace default container.\n         *\n         * Only allow to set elements by ID (as expected to be unique.\n         * If the container has already been changed, do not allow changing again as this be set once per component.\n         *\n         * @param {string} value\n         */\n        setContainer: function (value) {\n            if (this.container !== 'body' || !value.startsWith('#')) {\n                return;\n            }\n\n            this.container = value;\n        },\n\n        /**\n         * Get the container element.\n         *\n         * @return {string}\n         */\n        getContainer: function () {\n            return this.container;\n        },\n\n        /**\n         * Start full page loader action\n         */\n        startLoader: function () {\n            $(this.getContainer()).trigger('processStart');\n        },\n\n        /**\n         * Stop full page loader action\n         *\n         * @param {Boolean} [forceStop]\n         */\n        stopLoader: function (forceStop) {\n            let $elem = $(this.getContainer()),\n                stop = $elem.trigger.bind($elem, 'processStop'); //eslint-disable-line jquery-no-bind-unbind\n\n            forceStop ? stop() : resolver(stop);\n        }\n    };\n});\n","PayPal_Braintree/js/applepay/api.js":"/**\n * Braintree Apple Pay button API\n *\n **/\ndefine(\n    [\n        'jquery',\n        'underscore',\n        'uiComponent',\n        'mage/translate',\n        'mage/storage',\n        'Magento_Customer/js/customer-data',\n        'PayPal_Braintree/js/helper/remove-non-digit-characters'\n    ],\n    function (\n        $,\n        _,\n        Component,\n        $t,\n        storage,\n        customerData,\n        removeNonDigitCharacters\n    ) {\n        'use strict';\n\n        return Component.extend({\n            defaults: {\n                clientToken: null,\n                quoteId: 0,\n                displayName: null,\n                actionSuccess: null,\n                grandTotalAmount: 0,\n                isLoggedIn: false,\n                storeCode: 'default',\n                shippingAddress: {},\n                countryDirectory: null,\n                shippingMethods: {}\n            },\n\n            initialize: function () {\n                this._super();\n                if (!this.countryDirectory) {\n                    storage.get('rest/V1/directory/countries').done(function (result) {\n                        this.countryDirectory = {};\n                        let i, data, x, region, name;\n\n                        for (i = 0; i < result.length; ++i) {\n                            data = result[i];\n                            this.countryDirectory[data.two_letter_abbreviation] = {};\n                            if (typeof data.available_regions === 'undefined') {\n                                continue;\n                            }\n\n                            for (x = 0; x < data.available_regions.length; ++x) {\n                                region = data.available_regions[x];\n                                name = region.name.toLowerCase().replace(/[^A-Z0-9]/ig, '');\n                                this.countryDirectory[data.two_letter_abbreviation][name] = region.id;\n                            }\n                        }\n                    }.bind(this));\n                }\n            },\n\n            /**\n             * Get region ID\n             */\n            getRegionId: function (countryCode, regionName) {\n                if (typeof regionName !== 'string') {\n                    return null;\n                }\n\n                regionName = regionName.toLowerCase().replace(/[^A-Z0-9]/ig, '');\n\n                if (typeof this.countryDirectory[countryCode] !== 'undefined'\n                    && typeof this.countryDirectory[countryCode][regionName] !== 'undefined') {\n                    return this.countryDirectory[countryCode][regionName];\n                }\n\n                return 0;\n            },\n\n            /**\n             * Set & get api token\n             */\n            setClientToken: function (value) {\n                this.clientToken = value;\n            },\n            getClientToken: function () {\n                return this.clientToken;\n            },\n\n            /**\n             * Set and get quote id\n             */\n            setQuoteId: function (value) {\n                this.quoteId = value;\n            },\n            getQuoteId: function () {\n                return this.quoteId;\n            },\n\n            /**\n             * Set and get display name\n             */\n            setDisplayName: function (value) {\n                this.displayName = value;\n            },\n            getDisplayName: function () {\n                return this.displayName;\n            },\n\n            /**\n             * Set and get success redirection url\n             */\n            setActionSuccess: function (value) {\n                this.actionSuccess = value;\n            },\n            getActionSuccess: function () {\n                return this.actionSuccess;\n            },\n\n            /**\n             * Set and get grand total\n             */\n            setGrandTotalAmount: function (value) {\n                this.grandTotalAmount = parseFloat(value).toFixed(2);\n            },\n            getGrandTotalAmount: function () {\n                return parseFloat(this.grandTotalAmount);\n            },\n\n            /**\n             * Set and get is logged in\n             */\n            setIsLoggedIn: function (value) {\n                this.isLoggedIn = value;\n            },\n            getIsLoggedIn: function () {\n                return this.isLoggedIn;\n            },\n\n            /**\n             * Set and get store code\n             */\n            setStoreCode: function (value) {\n                this.storeCode = value;\n            },\n            getStoreCode: function () {\n                return this.storeCode;\n            },\n\n            /**\n             * API Urls for logged in / guest\n             */\n            getApiUrl: function (uri) {\n                if (this.getIsLoggedIn() === true) {\n                    return 'rest/' + this.getStoreCode() + '/V1/carts/mine/' + uri;\n                }\n                return 'rest/' + this.getStoreCode() + '/V1/guest-carts/' + this.getQuoteId() + '/' + uri;\n\n            },\n\n            /**\n             * Payment request info\n             */\n            getPaymentRequest: function () {\n                return {\n                    total: {\n                        label: this.getDisplayName(),\n                        amount: this.getGrandTotalAmount()\n                    },\n                    requiredShippingContactFields: ['postalAddress', 'name', 'email', 'phone'],\n                    requiredBillingContactFields: ['postalAddress', 'name']\n                };\n            },\n\n            /**\n             * Retrieve shipping methods based on address\n             */\n            onShippingContactSelect: function (event, session) {\n                // Get the address.\n                let address = event.shippingContact,\n\n                    // Create a payload.\n                    payload = {\n                        address: {\n                            city: address.locality,\n                            region: address.administrativeArea,\n                            country_id: address.countryCode.toUpperCase(),\n                            postcode: address.postalCode,\n                            save_in_address_book: 0\n                        }\n                    };\n\n                this.shippingAddress = payload.address;\n\n                // POST to endpoint for shipping methods.\n                storage.post(\n                    this.getApiUrl('estimate-shipping-methods'),\n                    JSON.stringify(payload)\n                ).done(function (result) {\n                    // Stop if no shipping methods.\n                    let virtualFlag = false,\n                        shippingMethods = [],\n                        totalsPayload = {};\n\n                    if (result.length === 0) {\n                        let productItems = customerData.get('cart')().items;\n\n                        _.each(productItems,\n                            function (item) {\n                                if (item.is_virtual || item.product_type === 'bundle') {\n                                    virtualFlag = true;\n                                } else {\n                                    virtualFlag = false;\n                                }\n                            }\n                        );\n                        if (!virtualFlag) {\n                            session.abort();\n                            // eslint-disable-next-line\n                            alert($t('There are no shipping methods available for you right now. Please try again or use an alternative payment method.'));\n                            return false;\n                        }\n                    }\n\n                    this.shippingMethods = {};\n\n                    // Format shipping methods array.\n                    for (let i = 0; i < result.length; i++) {\n                        if (typeof result[i].method_code !== 'string') {\n                            continue;\n                        }\n\n                        let method = {\n                            identifier: result[i].method_code,\n                            label: result[i].method_title,\n                            detail: result[i].carrier_title ? result[i].carrier_title : '',\n                            amount: parseFloat(result[i].amount).toFixed(2)\n                        };\n\n                        // Add method object to array.\n                        shippingMethods.push(method);\n\n                        this.shippingMethods[result[i].method_code] = result[i];\n\n                        if (!this.shippingMethod) {\n                            this.shippingMethod = result[i].method_code;\n                        }\n                    }\n\n                    // Create payload to get totals\n                    totalsPayload = {\n                        'addressInformation': {\n                            'address': {\n                                'countryId': this.shippingAddress.country_id,\n                                'region': this.shippingAddress.region,\n                                'regionId': this.getRegionId(\n                                    this.shippingAddress.country_id, this.shippingAddress.region),\n                                'postcode': this.shippingAddress.postcode\n                            },\n                            'shipping_method_code': virtualFlag\n                                ? null : this.shippingMethods[shippingMethods[0].identifier].method_code,\n                            'shipping_carrier_code': virtualFlag\n                                ? null : this.shippingMethods[shippingMethods[0].identifier].carrier_code\n                        }\n                    };\n\n                    // POST to endpoint to get totals, using 1st shipping method\n                    storage.post(\n                        this.getApiUrl('totals-information'),\n                        JSON.stringify(totalsPayload)\n                    ).done(function (totals) {\n                        // Set total\n                        this.setGrandTotalAmount(totals.base_grand_total);\n\n                        // Pass shipping methods back\n                        session.completeShippingContactSelection(\n                            window.ApplePaySession.STATUS_SUCCESS,\n                            shippingMethods,\n                            {\n                                label: this.getDisplayName(),\n                                amount: this.getGrandTotalAmount()\n                            },\n                            [{\n                                type: 'final',\n                                label: $t('Shipping'),\n                                amount: virtualFlag ? 0 : shippingMethods[0].amount\n                            }]\n                        );\n                    }.bind(this)).fail(function (error) {\n                        session.abort();\n                        // eslint-disable-next-line\n                        alert($t('We\\'re unable to fetch the cart totals for you. Please try an alternative payment method.'));\n                        console.error('Braintree ApplePay: Unable to get totals', error);\n                        return false;\n                    });\n\n                }.bind(this)).fail(function (result) {\n                    session.abort();\n                    // eslint-disable-next-line\n                    alert($t('We\\'re unable to find any shipping methods for you. Please try an alternative payment method.'));\n                    // eslint-disable-next-line\n                    console.error('Braintree ApplePay: Unable to find shipping methods for estimate-shipping-methods', result);\n                    return false;\n                });\n            },\n\n            /**\n             * Record which shipping method has been selected & Updated totals\n             */\n            onShippingMethodSelect: function (event, session) {\n                let shippingMethod = event.shippingMethod,\n                    payload = {\n                        'addressInformation': {\n                            'address': {\n                                'countryId': this.shippingAddress.country_id,\n                                'region': this.shippingAddress.region,\n                                'regionId': this.getRegionId(this.shippingAddress.country_id,\n                                    this.shippingAddress.region),\n                                'postcode': this.shippingAddress.postcode\n                            },\n                            'shipping_method_code': this.shippingMethods[shippingMethod.identifier].method_code,\n                            'shipping_carrier_code': this.shippingMethods[shippingMethod.identifier].carrier_code\n                        }\n                    };\n\n                this.shippingMethod = shippingMethod.identifier;\n\n\n                storage.post(\n                    this.getApiUrl('totals-information'),\n                    JSON.stringify(payload)\n                ).done(function (r) {\n                    this.setGrandTotalAmount(r.base_grand_total);\n\n                    session.completeShippingMethodSelection(\n                        window.ApplePaySession.STATUS_SUCCESS,\n                        {\n                            label: this.getDisplayName(),\n                            amount: this.getGrandTotalAmount()\n                        },\n                        [{\n                            type: 'final',\n                            label: $t('Shipping'),\n                            amount: shippingMethod.amount\n                        }]\n                    );\n                }.bind(this));\n            },\n\n            /**\n             * Place the order\n             */\n            startPlaceOrder: function (nonce, event, session, device_data) {\n                let shippingContact = event.payment.shippingContact,\n                    billingContact = event.payment.billingContact,\n                    payload = {\n                        'addressInformation': {\n                            'shipping_address': {\n                                'email': shippingContact.emailAddress,\n                                'telephone': removeNonDigitCharacters(_.get(shippingContact, 'phoneNumber', '')),\n                                'firstname': shippingContact.givenName,\n                                'lastname': shippingContact.familyName,\n                                'street': shippingContact.addressLines,\n                                'city': shippingContact.locality,\n                                'region': shippingContact.administrativeArea,\n                                'region_id': this.getRegionId(\n                                    shippingContact.countryCode.toUpperCase(), shippingContact.administrativeArea),\n                                'region_code': null,\n                                'country_id': shippingContact.countryCode.toUpperCase(),\n                                'postcode': shippingContact.postalCode,\n                                'same_as_billing': 0,\n                                'customer_address_id': 0,\n                                'save_in_address_book': 0\n                            },\n                            'billing_address': {\n                                'email': shippingContact.emailAddress,\n                                'telephone': removeNonDigitCharacters(_.get(shippingContact, 'phoneNumber', '')),\n                                'firstname': billingContact.givenName,\n                                'lastname': billingContact.familyName,\n                                'street': billingContact.addressLines,\n                                'city': billingContact.locality,\n                                'region': billingContact.administrativeArea,\n                                'region_id': this.getRegionId(\n                                    billingContact.countryCode.toUpperCase(), billingContact.administrativeArea),\n                                'region_code': null,\n                                'country_id': billingContact.countryCode.toUpperCase(),\n                                'postcode': billingContact.postalCode,\n                                'same_as_billing': 0,\n                                'customer_address_id': 0,\n                                'save_in_address_book': 0\n                            },\n                            'shipping_method_code': this.shippingMethod\n                                ? this.shippingMethods[this.shippingMethod].method_code : '' ,\n                            'shipping_carrier_code': this.shippingMethod\n                                ? this.shippingMethods[this.shippingMethod].carrier_code : ''\n                        }\n                    };\n\n                // Set addresses\n                storage.post(\n                    this.getApiUrl('shipping-information'),\n                    JSON.stringify(payload)\n                ).done(function () {\n                    // Submit payment information\n                    let paymentInformation = {\n                        'email': shippingContact.emailAddress,\n                        'paymentMethod': {\n                            'method': 'braintree_applepay',\n                            'additional_data': {\n                                'payment_method_nonce': nonce,\n                                'device_data': device_data\n                            }\n                        }\n                    };\n\n                    if (window.checkout && window.checkout.agreementIds) {\n                        paymentInformation.paymentMethod.extension_attributes = {\n                            'agreement_ids': window.checkout.agreementIds\n                        };\n                    }\n                    storage.post(\n                        this.getApiUrl('payment-information'),\n                        JSON.stringify(paymentInformation)\n                    ).done(function () {\n                        document.location = this.getActionSuccess();\n                        session.completePayment(window.ApplePaySession.STATUS_SUCCESS);\n                    }.bind(this)).fail(function (r) {\n                        session.completePayment(window.ApplePaySession.STATUS_FAILURE);\n                        session.abort();\n                        // eslint-disable-next-line\n                        alert($t('We\\'re unable to take your payment through Apple Pay. Please try an again or use an alternative payment method.'));\n                        console.error('Braintree ApplePay Unable to take payment', r);\n                        return false;\n                    });\n\n                }.bind(this)).fail(function (r) {\n                    console.error('Braintree ApplePay Unable to set shipping information', r);\n                    session.completePayment(window.ApplePaySession.STATUS_INVALID_BILLING_POSTAL_ADDRESS);\n                });\n            }\n        });\n    });\n","PayPal_Braintree/js/applepay/button.js":"/**\n * Braintree Apple Pay button\n **/\ndefine(\n    [\n        'uiComponent',\n        'knockout',\n        'jquery',\n        'braintree',\n        'braintreeDataCollector',\n        'braintreeApplePay',\n        'mage/translate',\n        'Magento_Checkout/js/model/payment/additional-validators'\n    ],\n    function (\n        Component,\n        ko,\n        $,\n        braintree,\n        dataCollector,\n        applePay,\n        $t,\n        additionalValidators\n    ) {\n        'use strict';\n\n        return {\n            init: function (element, context) {\n                // No element or context\n                if (!element || !context) {\n                    return;\n                }\n\n                // Context must implement these methods\n                if (typeof context.getClientToken !== 'function') {\n                    console.error(\n                        'Braintree ApplePay Context passed does not provide a getClientToken method',\n                        context\n                    );\n                    return;\n                }\n                if (typeof context.getPaymentRequest !== 'function') {\n                    console.error(\n                        'Braintree ApplePay Context passed does not provide a getPaymentRequest method',\n                        context\n                    );\n                    return;\n                }\n                if (typeof context.startPlaceOrder !== 'function') {\n                    console.error(\n                        'Braintree ApplePay Context passed does not provide a startPlaceOrder method',\n                        context\n                    );\n                    return;\n                }\n\n                if (this.deviceSupported() === false) {\n                    return;\n                }\n\n                // init braintree api\n                braintree.create({\n                    authorization: context.getClientToken()\n                }, function (clientErr, clientInstance) {\n                    this.initApplePay(clientErr, clientInstance, element, context);\n                }.bind(this));\n            },\n\n            /**\n             * Check the site is using HTTPS & apple pay is supported on this device.\n             * @return boolean\n             */\n            deviceSupported: function () {\n                if (location.protocol !== 'https:') {\n                    console.warn('Braintree Apple Pay requires your checkout be served over HTTPS');\n                    return false;\n                }\n\n                if ((window.ApplePaySession && window.ApplePaySession.canMakePayments()) !== true) {\n                    console.warn('Braintree Apple Pay is not supported on this device/browser');\n                    return false;\n                }\n\n                return true;\n            },\n\n            initApplePay: function (clientErr, clientInstance, element, context) {\n                if (clientErr) {\n                    console.error('Error creating client:', clientErr);\n                    return;\n                }\n\n                dataCollector.create({\n                    client: clientInstance\n                }, function (dataCollectorErr, dataCollectorInstance) {\n                    if (dataCollectorErr) {\n                        return;\n                    }\n\n                    applePay.create({\n                        client: clientInstance\n                    }, function (applePayErr, applePayInstance) {\n                        this.render(applePayErr, applePayInstance, dataCollectorInstance, element, context);\n                    }.bind(this));\n                }.bind(this));\n            },\n\n            render: function (applePayErr, applePayInstance, dataCollectorInstance, element, context) {\n                // No instance\n                if (applePayErr) {\n                    console.error('Braintree ApplePay Error creating applePayInstance:', applePayErr);\n                    return;\n                }\n\n                // Create a button within the KO element, as apple pay can only be instantiated through\n                // a valid on click event (ko onclick bind interferes with this).\n                let el = document.createElement('div');\n\n                el.className = 'braintree-apple-pay-button';\n                el.title = $t('Pay with Apple Pay');\n                el.alt = $t('Pay with Apple Pay');\n                el.addEventListener('click', function (e) {\n                    e.preventDefault();\n\n                    if ($(el).parents('#braintree-applepay-express-payment').length === 0\n                        && !additionalValidators.validate()) {\n                        return false;\n                    }\n\n                    // Payment request object\n                    let paymentRequest = applePayInstance.createPaymentRequest(context.getPaymentRequest());\n\n                    if (!paymentRequest) {\n                        console.error('Braintree ApplePay Unable to create paymentRequest', paymentRequest);\n                        this.showError();\n                        return;\n                    }\n\n                    // Show the loader\n                    $('body').loader('show');\n\n                    // Init apple pay session\n                    try {\n                        let session = new window.ApplePaySession(1, paymentRequest);\n\n                        // Handle invalid merchant\n                        session.onvalidatemerchant = function (event) {\n                            applePayInstance.performValidation({\n                                validationURL: event.validationURL,\n                                displayName: context.getDisplayName()\n                            }, function (validationErr, merchantSession) {\n                                if (validationErr) {\n                                    session.abort();\n                                    console.error('Braintree ApplePay Error validating merchant:', validationErr);\n                                    this.showError();\n                                    return;\n                                }\n\n                                session.completeMerchantValidation(merchantSession);\n                            });\n                        };\n\n                        // Attach payment auth event\n                        session.onpaymentauthorized = function (event) {\n                            applePayInstance.tokenize({\n                                token: event.payment.token\n                            }, function (tokenizeErr, payload) {\n                                if (tokenizeErr) {\n                                    console.error('Error tokenizing Apple Pay:', tokenizeErr);\n                                    session.completePayment(window.ApplePaySession.STATUS_FAILURE);\n                                    return;\n                                }\n\n                                let nonce = payload.nonce;\n\n                                // Pass the nonce back to the payment method\n                                context.startPlaceOrder(nonce, event, session, dataCollectorInstance.deviceData);\n                            });\n                        };\n\n                        // Attach onShippingContactSelect method\n                        if (typeof context.onShippingContactSelect === 'function') {\n                            session.onshippingcontactselected = function (event) {\n                                return context.onShippingContactSelect(event, session);\n                            };\n                        }\n\n                        // Attach onShippingMethodSelect method\n                        if (typeof context.onShippingMethodSelect === 'function') {\n                            session.onshippingmethodselected = function (event) {\n                                return context.onShippingMethodSelect(event, session);\n                            };\n                        }\n\n                        // Hook\n                        if (typeof context.onButtonClick === 'function') {\n                            context.onButtonClick(session, this, e);\n                        } else {\n                            $('body').loader('hide');\n                            session.begin();\n                        }\n                    } catch (err) {\n                        $('body').loader('hide');\n                        console.error('Braintree ApplePay Unable to create ApplePaySession', err);\n                        this.showError();\n                        return false;\n                    }\n                }.bind(this));\n\n                element.appendChild(el);\n            },\n\n            showError() {\n                // eslint-disable-next-line\n                alert($t('We\\'re unable to take payments through Apple Pay at the moment. Please try an alternative payment method.'));\n            }\n        };\n    }\n);\n","PayPal_Braintree/js/applepay/implementations/shortcut.js":"/**\n * Braintree Apple Pay mini cart payment method integration.\n **/\ndefine(\n    [\n        'uiComponent',\n        'PayPal_Braintree/js/applepay/button',\n        'PayPal_Braintree/js/applepay/api',\n        'mage/translate',\n        'domReady!'\n    ],\n    function (\n        Component,\n        button,\n        buttonApi,\n        $t\n    ) {\n        'use strict';\n\n        return Component.extend({\n\n            defaults: {\n                id: null,\n                clientToken: null,\n                quoteId: 0,\n                displayName: null,\n                actionSuccess: null,\n                grandTotalAmount: 0,\n                isLoggedIn: false,\n                storeCode: 'default'\n            },\n\n            /**\n             * @returns {Object}\n             */\n            initialize: function () {\n                this._super();\n                if (!this.displayName) {\n                    this.displayName = $t('Store');\n                }\n\n                let api = new buttonApi();\n\n                api.setGrandTotalAmount(parseFloat(this.grandTotalAmount).toFixed(2));\n                api.setClientToken(this.clientToken);\n                api.setDisplayName(this.displayName);\n                api.setQuoteId(this.quoteId);\n                api.setActionSuccess(this.actionSuccess);\n                api.setIsLoggedIn(this.isLoggedIn);\n                api.setStoreCode(this.storeCode);\n\n                // Attach the button\n                button.init(\n                    document.getElementById(this.id),\n                    api\n                );\n\n                return this;\n            }\n        });\n    }\n);\n","PayPal_Braintree/js/applepay/implementations/core-checkout/method-applepay.js":"define([\n    'uiComponent',\n    'Magento_Checkout/js/model/payment/renderer-list'\n], function (Component, rendererList) {\n    'use strict';\n\n    let config = window.checkoutConfig.payment;\n\n    if (config['braintree_applepay'].clientToken) {\n        rendererList.push({\n            type: 'braintree_applepay',\n            component: 'PayPal_Braintree/js/applepay/implementations/core-checkout/method-renderer/applepay'\n        });\n    }\n\n    return Component.extend({});\n});\n","PayPal_Braintree/js/applepay/implementations/core-checkout/method-renderer/applepay.js":"/**\n * Braintree Apple Pay payment method integration.\n **/\ndefine([\n    'underscore',\n    'Magento_Checkout/js/view/payment/default',\n    'Magento_Checkout/js/model/quote',\n    'Magento_Vault/js/view/payment/vault-enabler',\n    'PayPal_Braintree/js/applepay/button'\n], function (\n    _,\n    Component,\n    quote,\n    VaultEnabler,\n    button\n) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'PayPal_Braintree/applepay/core-checkout',\n            paymentMethodNonce: null,\n            deviceData: null,\n            grandTotalAmount: 0,\n            deviceSupported: button.deviceSupported(),\n            vaultEnabler: null,\n            additionalData: {}\n        },\n\n        /**\n         * @returns {exports.initialize}\n         */\n        initialize: function () {\n            this._super();\n            this.vaultEnabler = new VaultEnabler();\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\n\n            return this;\n        },\n\n        /**\n         * Inject the apple pay button into the target element\n         */\n        getApplePayBtn: function (id) {\n            button.init(\n                document.getElementById(id),\n                this\n            );\n        },\n\n        /**\n         * Subscribe to grand totals\n         */\n        initObservable: function () {\n            this._super();\n\n            this.vaultEnabler = new VaultEnabler();\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\n\n            this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\n\n            quote.totals.subscribe(function () {\n                if (this.grandTotalAmount !== quote.totals()['base_grand_total']) {\n                    this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\n                }\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Apple pay place order method\n         */\n        startPlaceOrder: function (nonce, event, session, device_data) {\n            this.setPaymentMethodNonce(nonce);\n            this.setDeviceData(device_data);\n            this.placeOrder();\n\n            session.completePayment(window.ApplePaySession.STATUS_SUCCESS);\n        },\n\n        /**\n         * Save nonce\n         */\n        setPaymentMethodNonce: function (nonce) {\n            this.paymentMethodNonce = nonce;\n        },\n\n        /**\n         * Save nonce\n         */\n        setDeviceData: function (device_data) {\n            this.deviceData = device_data;\n        },\n\n        /**\n         * Retrieve the client token\n         * @returns null|string\n         */\n        getClientToken: function () {\n            return window.checkoutConfig.payment[this.getCode()].clientToken;\n        },\n\n        /**\n         * Payment request data\n         */\n        getPaymentRequest: function () {\n            return {\n                total: {\n                    label: this.getDisplayName(),\n                    amount: this.grandTotalAmount\n                }\n            };\n        },\n\n        /**\n         * Merchant display name\n         */\n        getDisplayName: function () {\n            return window.checkoutConfig.payment[this.getCode()].merchantName;\n        },\n\n        /**\n         * Get data\n         * @returns {Object}\n         */\n        getData: function () {\n            var data = {\n                'method': this.getCode(),\n                'additional_data': {\n                    'payment_method_nonce': this.paymentMethodNonce,\n                    'device_data': this.deviceData\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n\n            this.vaultEnabler.visitAdditionalData(data);\n\n            return data;\n        },\n\n        /**\n         * Return image url for the apple pay mark\n         */\n        getPaymentMarkSrc: function () {\n            return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\n        },\n\n        /**\n         * @returns {Boolean}\n         */\n        isVaultEnabled: function () {\n            return this.vaultEnabler.isVaultEnabled();\n        },\n\n        /**\n         * @returns {String}\n         */\n        getVaultCode: function () {\n            return window.checkoutConfig.payment[this.getCode()].vaultCode;\n        }\n    });\n});\n","Magento_Multishipping/js/multi-shipping-balance.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/dataPost',\n    'jquery-ui-modules/widget'\n], function ($, dataPost) {\n    'use strict';\n\n    $.widget('mage.multiShippingBalance', {\n        options: {\n            changeUrl: ''\n        },\n\n        /**\n         * Initialize balance checkbox events.\n         *\n         * @private\n         */\n        _create: function () {\n            this.element.on('change', $.proxy(function (event) {\n                dataPost().postData({\n                    action: this.options.changeUrl,\n                    data: {\n                        useBalance: +$(event.target).is(':checked')\n                    }\n                });\n            }, this));\n        }\n    });\n\n    return $.mage.multiShippingBalance;\n});\n","Magento_Multishipping/js/multi-shipping.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Customer/js/customer-data',\n    'jquery-ui-modules/widget'\n], function ($, customerData) {\n    'use strict';\n\n    $.widget('mage.multiShipping', {\n        options: {\n            itemsQty: 0,\n            addNewAddressBtn: 'button[data-role=\"add-new-address\"]', // Add a new multishipping address.\n            addNewAddressFlag: '#add_new_address_flag', // Hidden input field with value 0 or 1.\n            canContinueBtn: 'button[data-role=\"can-continue\"]', // Continue (update quantity or go to shipping).\n            canContinueFlag: '#can_continue_flag' // Hidden input field with value 0 or 1.\n        },\n\n        /**\n         * Bind event handlers to click events for corresponding buttons.\n         * @private\n         */\n        _create: function () {\n            this._prepareCartData();\n            $(this.options.addNewAddressBtn).on('click', $.proxy(this._addNewAddress, this));\n            $(this.options.canContinueBtn).on('click', $.proxy(this._canContinue, this));\n        },\n\n        /**\n         * Takes cart items qty from current cart data and compare it with current items qty\n         * Reloads cart data if cart items qty is wrong\n         * @private\n         */\n        _prepareCartData: function () {\n            var cartData = customerData.get('cart');\n\n            if (cartData()['summary_count'] !== this.options.itemsQty) {\n                customerData.reload(['cart'], false);\n            }\n        },\n\n        /**\n         * Add a new address. Set the hidden input field and submit the form. Then enter a new shipping address.\n         * @private\n         */\n        _addNewAddress: function () {\n            $(this.options.addNewAddressFlag).val(1);\n            this.element.submit();\n        },\n\n        /**\n         * Can the user continue to the next step? The data-flag attribute holds either 0 (no) or 1 (yes).\n         * @private\n         * @param {Event} event - Click event on the corresponding button.\n         */\n        _canContinue: function (event) {\n            $(this.options.canContinueFlag).val(parseInt($(event.currentTarget).data('flag'), 10));\n        }\n    });\n\n    return $.mage.multiShipping;\n});\n","Magento_Multishipping/js/overview.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.orderOverview', {\n        options: {\n            opacity: 0.5, // CSS opacity for the 'Place Order' button when it's clicked and then disabled.\n            pleaseWaitLoader: 'span.please-wait', // 'Submitting order information...' Ajax loader.\n            placeOrderSubmit: 'button[type=\"submit\"]', // The 'Place Order' button.\n            agreements: '.checkout-agreements' // Container for all of the checkout agreements and terms/conditions\n        },\n\n        /**\n         * Bind a submit handler to the form.\n         * @private\n         */\n        _create: function () {\n            this.element.on('submit', $.proxy(this._showLoader, this));\n        },\n\n        /**\n         * Verify that all agreements and terms/conditions are checked. Show the Ajax loader. Disable\n         * the submit button (i.e. Place Order).\n         * @return {Boolean}\n         * @private\n         */\n        _showLoader: function () {\n            if ($(this.options.agreements).find('input[type=\"checkbox\"]:not(:checked)').length > 0) {\n                return false;\n            }\n            this.element.find(this.options.pleaseWaitLoader).show().end()\n                .find(this.options.placeOrderSubmit).prop('disabled', true).css('opacity', this.options.opacity);\n\n            return true;\n        }\n    });\n\n    return $.mage.orderOverview;\n});\n","Magento_Multishipping/js/payment.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/template',\n    'Magento_Ui/js/modal/alert',\n    'jquery-ui-modules/widget',\n    'mage/translate'\n], function ($, mageTemplate, alert) {\n    'use strict';\n\n    $.widget('mage.payment', {\n        options: {\n            continueSelector: '#payment-continue',\n            methodsContainer: '#payment-methods',\n            minBalance: 0,\n            tmpl: '<input id=\"hidden-free\" type=\"hidden\" name=\"payment[method]\" value=\"free\">'\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this.element.find('dd [name^=\"payment[\"]').prop('disabled', true).end()\n                .on('click', this.options.continueSelector, $.proxy(this._submitHandler, this))\n                .on('updateCheckoutPrice', $.proxy(function (event, data) {\n                    //updating the checkoutPrice\n                    if (data.price) {\n                        this.options.checkoutPrice += data.price;\n                    }\n\n                    //updating total price\n                    if (data.totalPrice) {\n                        data.totalPrice = this.options.checkoutPrice;\n                    }\n\n                    if (this.options.checkoutPrice <= this.options.minBalance) {\n                        // Add free input field, hide and disable unchecked\n                        // checkbox payment method and all radio button payment methods\n                        this._disablePaymentMethods();\n                    } else {\n                        // Remove free input field, show all payment method\n                        this._enablePaymentMethods();\n                    }\n                }, this))\n                .on('click', 'dt input:radio', $.proxy(this._paymentMethodHandler, this));\n\n            if (this.options.checkoutPrice < this.options.minBalance) {\n                this._disablePaymentMethods();\n            } else {\n                this._enablePaymentMethods();\n            }\n        },\n\n        /**\n         * Display payment details when payment method radio button is checked\n         * @private\n         * @param {EventObject} e\n         */\n        _paymentMethodHandler: function (e) {\n            var element = $(e.target),\n                parentsDl = element.closest('dl');\n\n            parentsDl.find('dt input:radio').prop('checked', false);\n            parentsDl.find('dd').addClass('no-display').end()\n                .find('.items').hide()\n                .find('[name^=\"payment[\"]').prop('disabled', true);\n            element.prop('checked', true).parent()\n                .next('dd').removeClass('no-display')\n                .find('.items').show().find('[name^=\"payment[\"]').prop('disabled', false);\n        },\n\n        /**\n         * make sure one payment method is selected\n         * @private\n         * @return {Boolean}\n         */\n        _validatePaymentMethod: function () {\n            var methods = this.element.find('[name^=\"payment[\"]'),\n                isValid = false;\n\n            if (methods.length === 0) {\n                alert({\n                    content: $.mage.__('We can\\'t complete your order because you don\\'t have a payment method set up.')\n                });\n            } else if (this.options.checkoutPrice <= this.options.minBalance) {\n                isValid = true;\n            } else if (methods.filter('input:radio:checked').length) {\n                isValid = true;\n            } else {\n                alert({\n                    content: $.mage.__('Please choose a payment method.')\n                });\n            }\n\n            return isValid;\n        },\n\n        /**\n         * Disable and enable payment methods\n         * @private\n         */\n        _disablePaymentMethods: function () {\n            var tmpl = mageTemplate(this.options.tmpl, {\n                data: {}\n            });\n\n            this.element.find('input[name=\"payment[method]\"]').prop('disabled', true).end()\n                .find('input[id^=\"use\"][name^=\"payment[use\"]:not(:checked)').prop('disabled', true).parent().hide();\n            this.element.find('[name=\"payment[method]\"][value=\"free\"]').parent('dt').remove();\n            this.element.find(this.options.methodsContainer).hide().find('[name^=\"payment[\"]').prop('disabled', true);\n\n            $(tmpl).appendTo(this.element);\n        },\n\n        /**\n         * Enable and enable payment methods\n         * @private\n         */\n        _enablePaymentMethods: function () {\n            this.element.find('input[name=\"payment[method]\"]').prop('disabled', false).end()\n                .find('dt input:radio:checked').trigger('click').end()\n                .find('input[id^=\"use\"][name^=\"payment[use\"]:not(:checked)').prop('disabled', false).parent().show();\n            this.element.find(this.options.methodsContainer).show();\n        },\n\n        /**\n         * Returns checked payment method.\n         *\n         * @private\n         */\n        _getSelectedPaymentMethod: function () {\n            return this.element.find('input[name=\\'payment[method]\\']:checked');\n        },\n\n        /**\n         * Validate  before form submit\n         * @private\n         * @param {EventObject} e\n         */\n        _submitHandler: function (e) {\n            var currentMethod,\n                submitButton;\n\n            e.preventDefault();\n\n            if (this._validatePaymentMethod()) {\n                currentMethod = this._getSelectedPaymentMethod();\n                submitButton = currentMethod.parent().next('dd').find('button[type=submit]');\n\n                if (submitButton.length) {\n                    submitButton.first().trigger('click');\n                } else {\n                    this.element.trigger('submit');\n                }\n            }\n        }\n    });\n\n    return $.mage.payment;\n});\n","Magento_Tax/js/view/checkout/summary/subtotal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'Magento_Checkout/js/view/summary/abstract-total',\n    'Magento_Checkout/js/model/quote'\n], function (Component, quote) {\n    'use strict';\n\n    var displaySubtotalMode = window.checkoutConfig.reviewTotalsDisplayMode;\n\n    return Component.extend({\n        defaults: {\n            displaySubtotalMode: displaySubtotalMode,\n            template: 'Magento_Tax/checkout/summary/subtotal'\n        },\n        totals: quote.getTotals(),\n\n        /**\n         * @return {*|String}\n         */\n        getValue: function () {\n            var price = 0;\n\n            if (this.totals()) {\n                price = this.totals().subtotal;\n            }\n\n            return this.getFormattedPrice(price);\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isBothPricesDisplayed: function () {\n            return this.displaySubtotalMode == 'both'; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isIncludingTaxDisplayed: function () {\n            return this.displaySubtotalMode == 'including'; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @return {*|String}\n         */\n        getValueInclTax: function () {\n            var price = 0;\n\n            if (this.totals()) {\n                price = this.totals()['subtotal_incl_tax'];\n            }\n\n            return this.getFormattedPrice(price);\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/summary/tax.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'ko',\n    'Magento_Checkout/js/view/summary/abstract-total',\n    'Magento_Checkout/js/model/quote',\n    'Magento_Checkout/js/model/totals',\n    'mage/translate',\n    'underscore'\n], function (ko, Component, quote, totals, $t, _) {\n    'use strict';\n\n    var isTaxDisplayedInGrandTotal = window.checkoutConfig.includeTaxInGrandTotal,\n        isFullTaxSummaryDisplayed = window.checkoutConfig.isFullTaxSummaryDisplayed,\n        isZeroTaxDisplayed = window.checkoutConfig.isZeroTaxDisplayed,\n        taxAmount = 0,\n        rates = 0;\n\n    return Component.extend({\n        defaults: {\n            isTaxDisplayedInGrandTotal: isTaxDisplayedInGrandTotal,\n            notCalculatedMessage: $t('Not yet calculated'),\n            template: 'Magento_Tax/checkout/summary/tax'\n        },\n        totals: quote.getTotals(),\n        isFullTaxSummaryDisplayed: isFullTaxSummaryDisplayed,\n\n        /**\n         * @return {Boolean}\n         */\n        ifShowValue: function () {\n            if (this.isFullMode() && this.getPureValue() == 0) { //eslint-disable-line eqeqeq\n                return isZeroTaxDisplayed;\n            }\n\n            return true;\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        ifShowDetails: function () {\n            if (!this.isFullMode()) {\n                return false;\n            }\n\n            return this.getPureValue() > 0 && isFullTaxSummaryDisplayed;\n        },\n\n        /**\n         * @return {Number}\n         */\n        getPureValue: function () {\n            var amount = 0,\n                taxTotal;\n\n            if (this.totals()) {\n                taxTotal = totals.getSegment('tax');\n\n                if (taxTotal) {\n                    amount = taxTotal.value;\n                }\n            }\n\n            return amount;\n        },\n\n        /**\n         * @return {*|Boolean}\n         */\n        isCalculated: function () {\n            return this.totals() && this.isFullMode() && totals.getSegment('tax') != null;\n        },\n\n        /**\n         * @return {*}\n         */\n        getValue: function () {\n            var amount;\n\n            if (!this.isCalculated()) {\n                return this.notCalculatedMessage;\n            }\n            amount = totals.getSegment('tax').value;\n\n            return this.getFormattedPrice(amount);\n        },\n\n        /**\n         * @param {*} amount\n         * @return {*|String}\n         */\n        formatPrice: function (amount) {\n            return this.getFormattedPrice(amount);\n        },\n\n        /**\n         * @param {*} parent\n         * @param {*} percentage\n         * @return {*|String}\n         */\n        getTaxAmount: function (parent, percentage) {\n            var totalPercentage = 0;\n\n            taxAmount = parent.amount;\n            rates = parent.rates;\n            _.each(rates, function (rate) {\n                totalPercentage += parseFloat(rate.percent);\n            });\n\n            return this.getFormattedPrice(this.getPercentAmount(taxAmount, totalPercentage, percentage));\n        },\n\n        /**\n         * @param {*} amount\n         * @param {*} totalPercentage\n         * @param {*} percentage\n         * @return {*|String}\n         */\n        getPercentAmount: function (amount, totalPercentage, percentage) {\n            return parseFloat(amount * percentage / totalPercentage);\n        },\n\n        /**\n         * @return {Array}\n         */\n        getDetails: function () {\n            var taxSegment = totals.getSegment('tax');\n\n            if (taxSegment && taxSegment['extension_attributes']) {\n                return taxSegment['extension_attributes']['tax_grandtotal_details'];\n            }\n\n            return [];\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/summary/grand-total.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'Magento_Checkout/js/view/summary/abstract-total',\n    'Magento_Checkout/js/model/quote',\n    'Magento_Catalog/js/price-utils',\n    'Magento_Checkout/js/model/totals'\n], function (Component, quote, priceUtils, totals) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            isFullTaxSummaryDisplayed: window.checkoutConfig.isFullTaxSummaryDisplayed || false,\n            template: 'Magento_Tax/checkout/summary/grand-total'\n        },\n        totals: quote.getTotals(),\n        isTaxDisplayedInGrandTotal: window.checkoutConfig.includeTaxInGrandTotal || false,\n\n        /**\n         * @return {*}\n         */\n        isDisplayed: function () {\n            return this.isFullMode();\n        },\n\n        /**\n         * @return {*|String}\n         */\n        getValue: function () {\n            var price = 0;\n\n            if (this.totals()) {\n                price = totals.getSegment('grand_total').value;\n            }\n\n            return this.getFormattedPrice(price);\n        },\n\n        /**\n         * @return {*|String}\n         */\n        getBaseValue: function () {\n            var price = 0;\n\n            if (this.totals()) {\n                price = this.totals()['base_grand_total'];\n            }\n\n            return priceUtils.formatPriceLocale(price, quote.getBasePriceFormat());\n        },\n\n        /**\n         * @return {*}\n         */\n        getGrandTotalExclTax: function () {\n            var total = this.totals(),\n                amount;\n\n            if (!total) {\n                return 0;\n            }\n\n            amount = total['grand_total'] - total['tax_amount'];\n\n            if (amount < 0) {\n                amount = 0;\n            }\n\n            return this.getFormattedPrice(amount);\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isBaseGrandTotalDisplayNeeded: function () {\n            var total = this.totals();\n\n            if (!total) {\n                return false;\n            }\n\n            return total['base_currency_code'] != total['quote_currency_code']; //eslint-disable-line eqeqeq\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/summary/shipping.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'jquery',\n    'Magento_Checkout/js/view/summary/shipping',\n    'Magento_Checkout/js/model/quote'\n], function ($, Component, quote) {\n    'use strict';\n\n    var displayMode = window.checkoutConfig.reviewShippingDisplayMode;\n\n    return Component.extend({\n        defaults: {\n            displayMode: displayMode,\n            template: 'Magento_Tax/checkout/summary/shipping'\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isBothPricesDisplayed: function () {\n            return this.displayMode == 'both'; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isIncludingDisplayed: function () {\n            return this.displayMode == 'including'; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isExcludingDisplayed: function () {\n            return this.displayMode == 'excluding'; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @return {*|Boolean}\n         */\n        isCalculated: function () {\n            return this.totals() && this.isFullMode() && quote.shippingMethod() != null;\n        },\n\n        /**\n         * @return {*}\n         */\n        getIncludingValue: function () {\n            var price;\n\n            if (!this.isCalculated()) {\n                return this.notCalculatedMessage;\n            }\n            price = this.totals()['shipping_incl_tax'];\n\n            return this.getFormattedPrice(price);\n        },\n\n        /**\n         * @return {*}\n         */\n        getExcludingValue: function () {\n            var price;\n\n            if (!this.isCalculated()) {\n                return this.notCalculatedMessage;\n            }\n            price = this.totals()['shipping_amount'];\n\n            return this.getFormattedPrice(price);\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/summary/item/details/subtotal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'Magento_Checkout/js/view/summary/item/details/subtotal'\n], function (subtotal) {\n    'use strict';\n\n    var displayPriceMode = window.checkoutConfig.reviewItemPriceDisplayMode || 'including';\n\n    return subtotal.extend({\n        defaults: {\n            displayPriceMode: displayPriceMode,\n            template: 'Magento_Tax/checkout/summary/item/details/subtotal'\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isPriceInclTaxDisplayed: function () {\n            return displayPriceMode == 'both' || displayPriceMode == 'including'; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        isPriceExclTaxDisplayed: function () {\n            return displayPriceMode == 'both' || displayPriceMode == 'excluding'; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @param {Object} quoteItem\n         * @return {*|String}\n         */\n        getValueInclTax: function (quoteItem) {\n            return this.getFormattedPrice(quoteItem['row_total_incl_tax']);\n        },\n\n        /**\n         * @param {Object} quoteItem\n         * @return {*|String}\n         */\n        getValueExclTax: function (quoteItem) {\n            return this.getFormattedPrice(quoteItem['row_total']);\n        }\n\n    });\n});\n","Magento_Tax/js/view/checkout/minicart/subtotal/totals.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'ko',\n    'uiComponent',\n    'Magento_Customer/js/customer-data'\n], function (ko, Component, customerData) {\n    'use strict';\n\n    return Component.extend({\n        displaySubtotal: ko.observable(true),\n\n        /**\n         * @override\n         */\n        initialize: function () {\n            this._super();\n            this.cart = customerData.get('cart');\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/shipping_method/price.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'uiComponent',\n    'Magento_Checkout/js/model/quote',\n    'Magento_Catalog/js/price-utils'\n], function (Component, quote, priceUtils) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_Tax/checkout/shipping_method/price'\n        },\n        isDisplayShippingPriceExclTax: window.checkoutConfig.isDisplayShippingPriceExclTax,\n        isDisplayShippingBothPrices: window.checkoutConfig.isDisplayShippingBothPrices,\n\n        /**\n         * @param {Object} item\n         * @return {Boolean}\n         */\n        isPriceEqual: function (item) {\n            return item['price_excl_tax'] != item['price_incl_tax']; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @param {*} price\n         * @return {*|String}\n         */\n        getFormattedPrice: function (price) {\n            //todo add format data\n            return priceUtils.formatPriceLocale(price, quote.getPriceFormat());\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/cart/totals/tax.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'Magento_Tax/js/view/checkout/summary/tax',\n    'Magento_Checkout/js/model/totals'\n], function (Component, totals) {\n    'use strict';\n\n    var isFullTaxSummaryDisplayed = window.checkoutConfig.isFullTaxSummaryDisplayed,\n        isZeroTaxDisplayed = window.checkoutConfig.isZeroTaxDisplayed;\n\n    return Component.extend({\n        /**\n         * @override\n         */\n        ifShowValue: function () {\n            if (this.isFullMode() && this.getPureValue() == 0) { //eslint-disable-line eqeqeq\n                return isZeroTaxDisplayed;\n            }\n\n            return true;\n        },\n\n        /**\n         * @override\n         */\n        ifShowDetails: function () {\n            return this.getPureValue() > 0 && isFullTaxSummaryDisplayed;\n        },\n\n        /**\n         * @override\n         */\n        isCalculated: function () {\n            return this.totals() && totals.getSegment('tax') !== null;\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/cart/totals/grand-total.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'Magento_Tax/js/view/checkout/summary/grand-total'\n], function (Component) {\n    'use strict';\n\n    return Component.extend({\n        /**\n         * @override\n         */\n        isDisplayed: function () {\n            return true;\n        }\n    });\n});\n","Magento_Tax/js/view/checkout/cart/totals/shipping.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\ndefine([\n    'Magento_Tax/js/view/checkout/summary/shipping',\n    'Magento_Checkout/js/model/quote'\n], function (Component, quote) {\n    'use strict';\n\n    return Component.extend({\n        /**\n         * @override\n         */\n        isCalculated: function () {\n            return !!quote.shippingMethod();\n        },\n\n        /**\n         * @override\n         */\n        getShippingMethodTitle: function () {\n            return '(' + this._super() + ')';\n        }\n    });\n});\n","Magento_Tax/js/price/adjustment.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/columns/column',\n    'mage/translate'\n], function (Element, $t) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            bodyTmpl: 'Magento_Tax/price/adjustment',\n            taxPriceType: 'final_price',\n            taxPriceCssClass: 'price-including-tax',\n            bothPrices: 3,\n            inclTax: 2,\n            exclTax: 1,\n            modules: {\n                price: '${ $.parentName }'\n            },\n            listens: {\n                price: 'initializePriceAttributes'\n            }\n        },\n\n        /**\n         * {@inheritdoc}\n         */\n        initialize: function () {\n            this._super()\n                .initializePriceAttributes();\n\n            return this;\n        },\n\n        /**\n         * Update parent price.\n         *\n         * @returns {Object} Chainable.\n         */\n        initializePriceAttributes: function () {\n            if (this.displayBothPrices && this.price()) {\n                this.price().priceWrapperCssClasses = this.taxPriceCssClass;\n                this.price().priceWrapperAttr = {\n                    'data-label': $t('Incl. Tax')\n                };\n            }\n\n            return this;\n        },\n\n        /**\n         * Get price tax adjustment.\n         *\n         * @param {Object} row\n         * @return {HTMLElement} tax html\n         */\n        getTax: function (row) {\n            return row['price_info']['extension_attributes']['tax_adjustments']['formatted_prices'][this.taxPriceType];\n        },\n\n        /**\n         * UnsanitizedHtml version of getTax.\n         *\n         * @param {Object} row\n         * @return {HTMLElement} tax html\n         */\n        getTaxUnsanitizedHtml: function (row) {\n            return this.getTax(row);\n        },\n\n        /**\n         * Set price tax type.\n         *\n         * @param {String} priceType\n         * @return {Object}\n         */\n        setPriceType: function (priceType) {\n            this.taxPriceType = priceType;\n\n            return this;\n        },\n\n        /**\n         * Return whether display setting is to display\n         * both price including tax and price excluding tax.\n         *\n         * @return {Boolean}\n         */\n        displayBothPrices: function () {\n            return +this.source.data.displayTaxes === this.bothPrices;\n        },\n\n        /**\n         * Return whether display setting is to display price including tax.\n         *\n         * @return {Boolean}\n         */\n        displayPriceIncludeTax: function () {\n            return +this.source.data.displayTaxes === this.inclTax;\n        },\n\n        /**\n         * Return whether display setting is to display price excluding tax.\n         *\n         * @return {Boolean}\n         */\n        displayPriceExclTax: function () {\n            return +this.source.data.displayTaxes === this.exclTax;\n        }\n    });\n});\n","requirejs/domReady.js":"/**\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/domReady for details\n */\n/*jslint */\n/*global require: false, define: false, requirejs: false,\n  window: false, clearInterval: false, document: false,\n  self: false, setInterval: false */\n\n\ndefine(function () {\n    'use strict';\n\n    var isTop, testDiv, scrollIntervalId,\n        isBrowser = typeof window !== \"undefined\" && window.document,\n        isPageLoaded = !isBrowser,\n        doc = isBrowser ? document : null,\n        readyCalls = [];\n\n    function runCallbacks(callbacks) {\n        var i;\n        for (i = 0; i < callbacks.length; i += 1) {\n            callbacks[i](doc);\n        }\n    }\n\n    function callReady() {\n        var callbacks = readyCalls;\n\n        if (isPageLoaded) {\n            //Call the DOM ready callbacks\n            if (callbacks.length) {\n                readyCalls = [];\n                runCallbacks(callbacks);\n            }\n        }\n    }\n\n    /**\n     * Sets the page as loaded.\n     */\n    function pageLoaded() {\n        if (!isPageLoaded) {\n            isPageLoaded = true;\n            if (scrollIntervalId) {\n                clearInterval(scrollIntervalId);\n            }\n\n            callReady();\n        }\n    }\n\n    if (isBrowser) {\n        if (document.addEventListener) {\n            //Standards. Hooray! Assumption here that if standards based,\n            //it knows about DOMContentLoaded.\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\n            window.addEventListener(\"load\", pageLoaded, false);\n        } else if (window.attachEvent) {\n            window.attachEvent(\"onload\", pageLoaded);\n\n            testDiv = document.createElement('div');\n            try {\n                isTop = window.frameElement === null;\n            } catch (e) {}\n\n            //DOMContentLoaded approximation that uses a doScroll, as found by\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\n            //but modified by other contributors, including jdalton\n            if (testDiv.doScroll && isTop && window.external) {\n                scrollIntervalId = setInterval(function () {\n                    try {\n                        testDiv.doScroll();\n                        pageLoaded();\n                    } catch (e) {}\n                }, 30);\n            }\n        }\n\n        //Check if document is no longer loading, and if so, just trigger page load\n        //listeners. Latest webkit browsers also use \"interactive\", and\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\n        //entering \"interactive\" or \"complete\". More details:\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\n        //Hmm, this is more complicated on further use, see \"firing too early\"\n        //bug: https://github.com/requirejs/domReady/issues/1\n        //so removing the || document.readyState === \"interactive\" test.\n        //There is still a window.onload binding that should get fired if\n        //DOMContentLoaded is missed.\n        if (document.readyState !== \"loading\") {\n            // Handle it asynchronously to allow scripts the opportunity to delay ready\n            setTimeout(pageLoaded);\n        }\n    }\n\n    /** START OF PUBLIC API **/\n\n    /**\n     * Registers a callback for DOM ready. If DOM is already ready, the\n     * callback is called immediately.\n     * @param {Function} callback\n     */\n    function domReady(callback) {\n        if (isPageLoaded) {\n            callback(doc);\n        } else {\n            readyCalls.push(callback);\n        }\n        return domReady;\n    }\n\n    domReady.version = '2.0.1';\n\n    /**\n     * Loader Plugin API method\n     */\n    domReady.load = function (name, req, onLoad, config) {\n        if (config.isBuild) {\n            onLoad(null);\n        } else {\n            domReady(onLoad);\n        }\n    };\n\n    /** END OF PUBLIC API **/\n\n    return domReady;\n});\n","Magento_Customer/js/section-config.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['underscore'], function (_) {\n    'use strict';\n\n    var baseUrls = [],\n        sections = [],\n        clientSideSections = [],\n        sectionNames = [],\n        canonize;\n\n    /**\n     * @param {String} url\n     * @return {String}\n     */\n    canonize = function (url) {\n        var route = url;\n\n        _.some(baseUrls, function (baseUrl) {\n            route = url.replace(baseUrl, '');\n\n            return route !== url;\n        });\n\n        return route.replace(/^\\/?index.php\\/?/, '').toLowerCase();\n    };\n\n    return {\n        /**\n         * Returns a list of sections which should be invalidated for given URL.\n         * @param {String} url - URL which was requested.\n         * @return {Object} - List of sections to invalidate.\n         */\n        getAffectedSections: function (url) {\n            var route = canonize(url),\n                actions = _.find(sections, function (val, section) {\n                    var matched;\n\n                    // Covers the case where \"*\" works as a glob pattern.\n                    if (section.indexOf('*') >= 0) {\n                        section = section.replace(/\\*/g, '[^/]+') + '$';\n                        matched = route.match(section);\n\n                        return matched && matched[0] === route;\n                    }\n\n                    return route.indexOf(section) === 0;\n                });\n\n            return _.union(_.toArray(actions), sections['*']);\n        },\n\n        /**\n         * Filters the list of given sections to the ones defined as client side.\n         * @param {Object} allSections - List of sections to check.\n         * @return {Object} - List of filtered sections.\n         */\n        filterClientSideSections: function (allSections) {\n            return _.difference(allSections, clientSideSections);\n        },\n\n        /**\n         * Tells if section is defined as client side.\n         * @param {String} sectionName - Name of the section to check.\n         * @return {Boolean}\n         */\n        isClientSideSection: function (sectionName) {\n            return _.contains(clientSideSections, sectionName);\n        },\n\n        /**\n         * Returns array of section names.\n         * @returns {Array}\n         */\n        getSectionNames: function () {\n            return sectionNames;\n        },\n\n        /**\n         * @param {Object} options\n         * @constructor\n         */\n        'Magento_Customer/js/section-config': function (options) {\n            baseUrls = options.baseUrls;\n            sections = options.sections;\n            clientSideSections = options.clientSideSections;\n            sectionNames = options.sectionNames;\n        }\n    };\n});\n","Magento_Customer/js/show-password.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'uiComponent'\n], function ($, Component) {\n    'use strict';\n\n    return Component.extend({\n        passwordSelector: '',\n        passwordInputType: 'password',\n        textInputType: 'text',\n\n        defaults: {\n            template: 'Magento_Customer/show-password',\n            isPasswordVisible: false\n        },\n\n        /**\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['isPasswordVisible']);\n\n            this.isPasswordVisible.subscribe(function (isChecked) {\n                this._showPassword(isChecked);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Show/Hide password\n         * @private\n         */\n        _showPassword: function (isChecked) {\n            $(this.passwordSelector).attr('type',\n                isChecked ? this.textInputType : this.passwordInputType\n            );\n        }\n    });\n});\n","Magento_Customer/js/checkout-balance.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.checkoutBalance', {\n        /**\n         * Initialize store credit events\n         * @private\n         */\n        _create: function () {\n            this.eventData = {\n                price: this.options.balance,\n                totalPrice: 0\n            };\n            this.element.on('change', $.proxy(function (e) {\n                if ($(e.target).is(':checked')) {\n                    this.eventData.price = -1 * this.options.balance;\n                } else {\n                    if (this.options.amountSubstracted) { //eslint-disable-line no-lonely-if\n                        this.eventData.price = parseFloat(this.options.usedAmount);\n                        this.options.amountSubstracted = false;\n                    } else {\n                        this.eventData.price = parseFloat(this.options.balance);\n                    }\n                }\n                this.element.trigger('updateCheckoutPrice', this.eventData);\n            }, this));\n        }\n    });\n\n    return $.mage.checkoutBalance;\n});\n","Magento_Customer/js/validation.js":"define([\n    'jquery',\n    'moment',\n    'mageUtils',\n    'jquery/validate',\n    'validation',\n    'mage/translate'\n], function ($, moment, utils) {\n    'use strict';\n\n    $.validator.addMethod(\n        'validate-date',\n        function (value, element, params) {\n            var dateFormat = utils.normalizeDate(params.dateFormat);\n\n            if (value === '') {\n                return true;\n            }\n\n            return moment(value, dateFormat, true).isValid();\n        },\n        $.mage.__('Invalid date')\n    );\n\n    $.validator.addMethod(\n        'validate-dob',\n        function (value, element, params) {\n            var dateFormat = utils.convertToMomentFormat(params.dateFormat);\n\n            if (value === '') {\n                return true;\n            }\n\n            return moment(value, dateFormat).isBefore(moment());\n        },\n        $.mage.__('The Date of Birth should not be greater than today.')\n    );\n});\n","Magento_Customer/js/block-submit-on-send.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/mage'\n], function ($) {\n    'use strict';\n\n    return function (config) {\n        var dataForm = $('#' + config.formId);\n\n        dataForm.on('submit', function () {\n            $(this).find(':submit').attr('disabled', 'disabled');\n\n            if (this.isValid === false) {\n                $(this).find(':submit').prop('disabled', false);\n            }\n            this.isValid = true;\n        });\n        dataForm.on('invalid-form.validate', function () {\n            $(this).find(':submit').prop('disabled', false);\n            this.isValid = false;\n        });\n    };\n});\n","Magento_Customer/js/logout-redirect.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/mage'\n], function ($) {\n    'use strict';\n\n    return function (data) {\n        $($.mage.redirect(data.url, 'assign', 5000));\n    };\n});\n","Magento_Customer/js/change-email-password.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.changeEmailPassword', {\n        options: {\n            changeEmailSelector: '[data-role=change-email]',\n            changePasswordSelector: '[data-role=change-password]',\n            mainContainerSelector: '[data-container=change-email-password]',\n            titleSelector: '[data-title=change-email-password]',\n            emailContainerSelector: '[data-container=change-email]',\n            newPasswordContainerSelector: '[data-container=new-password]',\n            confirmPasswordContainerSelector: '[data-container=confirm-password]',\n            currentPasswordSelector: '[data-input=current-password]',\n            emailSelector: '[data-input=change-email]',\n            newPasswordSelector: '[data-input=new-password]',\n            confirmPasswordSelector: '[data-input=confirm-password]'\n        },\n\n        /**\n         * Create widget\n         * @private\n         */\n        _create: function () {\n            this.element.on('change', $.proxy(function () {\n                this._checkChoice();\n            }, this));\n\n            this._checkChoice();\n            this._bind();\n        },\n\n        /**\n         * Event binding, will monitor change, keyup and paste events.\n         * @private\n         */\n        _bind: function () {\n            this._on($(this.options.emailSelector), {\n                'change': this._updatePasswordFieldWithEmailValue,\n                'keyup': this._updatePasswordFieldWithEmailValue,\n                'paste': this._updatePasswordFieldWithEmailValue\n            });\n        },\n\n        /**\n         * Check choice\n         * @private\n         */\n        _checkChoice: function () {\n            if ($(this.options.changeEmailSelector).is(':checked') &&\n                $(this.options.changePasswordSelector).is(':checked')) {\n                this._showAll();\n            } else if ($(this.options.changeEmailSelector).is(':checked')) {\n                this._showEmail();\n            } else if ($(this.options.changePasswordSelector).is(':checked')) {\n                this._showPassword();\n            } else {\n                this._hideAll();\n            }\n        },\n\n        /**\n         * Show email and password input fields\n         * @private\n         */\n        _showAll: function () {\n            $(this.options.titleSelector).html(this.options.titleChangeEmailAndPassword);\n\n            $(this.options.mainContainerSelector).show();\n            $(this.options.emailContainerSelector).show();\n            $(this.options.newPasswordContainerSelector).show();\n            $(this.options.confirmPasswordContainerSelector).show();\n\n            $(this.options.currentPasswordSelector).attr('data-validate', '{required:true}').prop('disabled', false);\n            $(this.options.emailSelector).attr('data-validate', '{required:true}').prop('disabled', false);\n            this._updatePasswordFieldWithEmailValue();\n            $(this.options.confirmPasswordSelector).attr(\n                'data-validate',\n                '{required:true, equalTo:\"' + this.options.newPasswordSelector + '\"}'\n            ).prop('disabled', false);\n        },\n\n        /**\n         * Hide email and password input fields\n         * @private\n         */\n        _hideAll: function () {\n            $(this.options.mainContainerSelector).hide();\n            $(this.options.emailContainerSelector).hide();\n            $(this.options.newPasswordContainerSelector).hide();\n            $(this.options.confirmPasswordContainerSelector).hide();\n\n            $(this.options.currentPasswordSelector).removeAttr('data-validate').prop('disabled', true);\n            $(this.options.emailSelector).removeAttr('data-validate').prop('disabled', true);\n            $(this.options.newPasswordSelector).removeAttr('data-validate').prop('disabled', true);\n            $(this.options.confirmPasswordSelector).removeAttr('data-validate').prop('disabled', true);\n        },\n\n        /**\n         * Show email input fields\n         * @private\n         */\n        _showEmail: function () {\n            this._showAll();\n            $(this.options.titleSelector).html(this.options.titleChangeEmail);\n\n            $(this.options.newPasswordContainerSelector).hide();\n            $(this.options.confirmPasswordContainerSelector).hide();\n\n            $(this.options.newPasswordSelector).removeAttr('data-validate').prop('disabled', true);\n            $(this.options.confirmPasswordSelector).removeAttr('data-validate').prop('disabled', true);\n        },\n\n        /**\n         * Show password input fields\n         * @private\n         */\n        _showPassword: function () {\n            this._showAll();\n            $(this.options.titleSelector).html(this.options.titleChangePassword);\n\n            $(this.options.emailContainerSelector).hide();\n\n            $(this.options.emailSelector).removeAttr('data-validate').prop('disabled', true);\n        },\n\n        /**\n         * Update password validation rules with email input field value\n         * @private\n         */\n        _updatePasswordFieldWithEmailValue: function () {\n            $(this.options.newPasswordSelector).attr(\n                'data-validate',\n                '{required:true, ' +\n                '\\'validate-customer-password\\':true, ' +\n                '\\'password-not-equal-to-user-name\\':\\'' + $(this.options.emailSelector).val() + '\\'}'\n            ).prop('disabled', false);\n        }\n    });\n\n    return $.mage.changeEmailPassword;\n});\n","Magento_Customer/js/customer-data.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'underscore',\n    'ko',\n    'Magento_Customer/js/section-config',\n    'mage/url',\n    'mage/storage',\n    'jquery/jquery-storageapi'\n], function ($, _, ko, sectionConfig, url) {\n    'use strict';\n\n    var options = {},\n        storage,\n        storageInvalidation,\n        invalidateCacheBySessionTimeOut,\n        invalidateCacheByCloseCookieSession,\n        dataProvider,\n        buffer,\n        customerData,\n        deferred = $.Deferred();\n\n    url.setBaseUrl(window.BASE_URL);\n    options.sectionLoadUrl = url.build('customer/section/load');\n\n    /**\n     * @param {Object} invalidateOptions\n     */\n    invalidateCacheBySessionTimeOut = function (invalidateOptions) {\n        var date;\n\n        if (new Date($.localStorage.get('mage-cache-timeout')) < new Date()) {\n            storage.removeAll();\n        }\n        date = new Date(Date.now() + parseInt(invalidateOptions.cookieLifeTime, 10) * 1000);\n        $.localStorage.set('mage-cache-timeout', date);\n    };\n\n    /**\n     * Invalidate Cache By Close Cookie Session\n     */\n    invalidateCacheByCloseCookieSession = function () {\n        var isLoggedIn = parseInt(options.isLoggedIn, 10) || 0;\n\n        if (!$.cookieStorage.isSet('mage-cache-sessid')) {\n            storage.removeAll();\n        }\n\n        if (!$.localStorage.isSet('mage-customer-login')) {\n            $.localStorage.set('mage-customer-login', isLoggedIn);\n        }\n        if ($.localStorage.get('mage-customer-login') !== isLoggedIn) {\n            $.localStorage.set('mage-customer-login', isLoggedIn);\n            storage.removeAll();\n        }\n\n        $.cookieStorage.set('mage-cache-sessid', true);\n    };\n\n    dataProvider = {\n\n        /**\n         * @param {Object} sectionNames\n         * @return {Object}\n         */\n        getFromStorage: function (sectionNames) {\n            var result = {};\n\n            _.each(sectionNames, function (sectionName) {\n                result[sectionName] = storage.get(sectionName);\n            });\n\n            return result;\n        },\n\n        /**\n         * @param {Object} sectionNames\n         * @param {Boolean} forceNewSectionTimestamp\n         * @return {*}\n         */\n        getFromServer: function (sectionNames, forceNewSectionTimestamp) {\n            var parameters;\n\n            sectionNames = sectionConfig.filterClientSideSections(sectionNames);\n            parameters = _.isArray(sectionNames) && sectionNames.indexOf('*') < 0 ? {\n                sections: sectionNames.join(',')\n            } : [];\n            parameters['force_new_section_timestamp'] = forceNewSectionTimestamp;\n\n            return $.getJSON(options.sectionLoadUrl, parameters).fail(function (jqXHR) {\n                throw new Error(jqXHR);\n            });\n        }\n    };\n\n    /**\n     * @param {Function} target\n     * @param {String} sectionName\n     * @return {*}\n     */\n    ko.extenders.disposableCustomerData = function (target, sectionName) {\n        var sectionDataIds, newSectionDataIds = {};\n\n        target.subscribe(function () {\n            setTimeout(function () {\n                storage.remove(sectionName);\n                sectionDataIds = $.cookieStorage.get('section_data_ids') || {};\n                _.each(sectionDataIds, function (data, name) {\n                    if (name !== sectionName) {\n                        newSectionDataIds[name] = data;\n                    }\n                });\n                $.cookieStorage.set('section_data_ids', newSectionDataIds);\n            }, 3000);\n        });\n\n        return target;\n    };\n\n    buffer = {\n        data: {},\n\n        /**\n         * @param {String} sectionName\n         */\n        bind: function (sectionName) {\n            this.data[sectionName] = ko.observable({});\n        },\n\n        /**\n         * @param {String} sectionName\n         * @return {Object}\n         */\n        get: function (sectionName) {\n            if (!this.data[sectionName]) {\n                this.bind(sectionName);\n            }\n\n            return this.data[sectionName];\n        },\n\n        /**\n         * @return {Array}\n         */\n        keys: function () {\n            return _.keys(this.data);\n        },\n\n        /**\n         * @param {String} sectionName\n         * @param {Object} sectionData\n         */\n        notify: function (sectionName, sectionData) {\n            if (!this.data[sectionName]) {\n                this.bind(sectionName);\n            }\n            this.data[sectionName](sectionData);\n        },\n\n        /**\n         * @param {Object} sections\n         */\n        update: function (sections) {\n            var sectionId = 0,\n                sectionDataIds = $.cookieStorage.get('section_data_ids') || {};\n\n            _.each(sections, function (sectionData, sectionName) {\n                sectionId = sectionData['data_id'];\n                sectionDataIds[sectionName] = sectionId;\n                storage.set(sectionName, sectionData);\n                storageInvalidation.remove(sectionName);\n                buffer.notify(sectionName, sectionData);\n            });\n            $.cookieStorage.set('section_data_ids', sectionDataIds);\n        },\n\n        /**\n         * @param {Object} sections\n         */\n        remove: function (sections) {\n            _.each(sections, function (sectionName) {\n                storage.remove(sectionName);\n\n                if (!sectionConfig.isClientSideSection(sectionName)) {\n                    storageInvalidation.set(sectionName, true);\n                }\n            });\n        }\n    };\n\n    customerData = {\n\n        /**\n         * Customer data initialization\n         */\n        init: function () {\n            var expiredSectionNames = this.getExpiredSectionNames();\n\n            if (expiredSectionNames.length > 0) {\n                _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {\n                    buffer.notify(sectionName, sectionData);\n                });\n                this.reload(expiredSectionNames, false);\n            } else {\n                _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {\n                    buffer.notify(sectionName, sectionData);\n                });\n\n                if (!_.isEmpty(storageInvalidation.keys())) {\n                    this.reload(storageInvalidation.keys(), false);\n                }\n            }\n\n            if (!_.isEmpty($.cookieStorage.get('section_data_clean'))) {\n                this.reload(sectionConfig.getSectionNames(), true);\n                $.cookieStorage.set('section_data_clean', '');\n            }\n        },\n\n        /**\n         * Storage init\n         */\n        initStorage: function () {\n            $.cookieStorage.setConf({\n                path: '/',\n                expires: new Date(Date.now() + parseInt(options.cookieLifeTime, 10) * 1000)\n            });\n\n            if (options.cookieDomain) {\n                $.cookieStorage.setConf({\n                    domain: options.cookieDomain\n                });\n            }\n\n            storage = $.initNamespaceStorage('mage-cache-storage').localStorage;\n            storageInvalidation = $.initNamespaceStorage('mage-cache-storage-section-invalidation').localStorage;\n        },\n\n        /**\n         * Retrieve the list of sections that has expired since last page reload.\n         *\n         * Sections can expire due to lifetime constraints or due to inconsistent storage information\n         * (validated by cookie data).\n         *\n         * @return {Array}\n         */\n        getExpiredSectionNames: function () {\n            var expiredSectionNames = [],\n                cookieSectionTimestamps = $.cookieStorage.get('section_data_ids') || {},\n                sectionLifetime = options.expirableSectionLifetime * 60,\n                currentTimestamp = Math.floor(Date.now() / 1000),\n                sectionData;\n\n            // process sections that can expire due to lifetime constraints\n            _.each(options.expirableSectionNames, function (sectionName) {\n                sectionData = storage.get(sectionName);\n\n                if (typeof sectionData === 'object' && sectionData['data_id'] + sectionLifetime <= currentTimestamp) {\n                    expiredSectionNames.push(sectionName);\n                }\n            });\n\n            // process sections that can expire due to storage information inconsistency\n            _.each(cookieSectionTimestamps, function (cookieSectionTimestamp, sectionName) {\n                if (storage !== undefined) {\n                    sectionData = storage.get(sectionName);\n                }\n\n                if (typeof sectionData === 'undefined' ||\n                    typeof sectionData === 'object' &&\n                    cookieSectionTimestamp !== sectionData['data_id']\n                ) {\n                    expiredSectionNames.push(sectionName);\n                }\n            });\n\n            //remove expired section names of previously installed/enable modules\n            expiredSectionNames = _.intersection(expiredSectionNames, sectionConfig.getSectionNames());\n\n            return _.uniq(expiredSectionNames);\n        },\n\n        /**\n         * Check if some sections have to be reloaded.\n         *\n         * @deprecated Use getExpiredSectionNames instead.\n         *\n         * @return {Boolean}\n         */\n        needReload: function () {\n            var expiredSectionNames = this.getExpiredSectionNames();\n\n            return expiredSectionNames.length > 0;\n        },\n\n        /**\n         * Retrieve the list of expired keys.\n         *\n         * @deprecated Use getExpiredSectionNames instead.\n         *\n         * @return {Array}\n         */\n        getExpiredKeys: function () {\n            return this.getExpiredSectionNames();\n        },\n\n        /**\n         * @param {String} sectionName\n         * @return {*}\n         */\n        get: function (sectionName) {\n            return buffer.get(sectionName);\n        },\n\n        /**\n         * @param {String} sectionName\n         * @param {Object} sectionData\n         */\n        set: function (sectionName, sectionData) {\n            var data = {};\n\n            data[sectionName] = sectionData;\n            buffer.update(data);\n        },\n\n        /**\n         * Avoid using this function directly 'cause of possible performance drawbacks.\n         * Each customer section reload brings new non-cached ajax request.\n         *\n         * @param {Array} sectionNames\n         * @param {Boolean} forceNewSectionTimestamp\n         * @return {*}\n         */\n        reload: function (sectionNames, forceNewSectionTimestamp) {\n            return dataProvider.getFromServer(sectionNames, forceNewSectionTimestamp).done(function (sections) {\n                $(document).trigger('customer-data-reload', [sectionNames]);\n                buffer.update(sections);\n            });\n        },\n\n        /**\n         * @param {Array} sectionNames\n         */\n        invalidate: function (sectionNames) {\n            var sectionDataIds,\n                sectionsNamesForInvalidation;\n\n            sectionsNamesForInvalidation = _.contains(sectionNames, '*') ? sectionConfig.getSectionNames() :\n                sectionNames;\n\n            $(document).trigger('customer-data-invalidate', [sectionsNamesForInvalidation]);\n            buffer.remove(sectionsNamesForInvalidation);\n            sectionDataIds = $.cookieStorage.get('section_data_ids') || {};\n\n            // Invalidate section in cookie (increase version of section with 1000)\n            _.each(sectionsNamesForInvalidation, function (sectionName) {\n                if (!sectionConfig.isClientSideSection(sectionName)) {\n                    sectionDataIds[sectionName] += 1000;\n                }\n            });\n            $.cookieStorage.set('section_data_ids', sectionDataIds);\n        },\n\n        /**\n         * Checks if customer data is initialized.\n         *\n         * @returns {jQuery.Deferred}\n         */\n        getInitCustomerData: function () {\n            return deferred.promise();\n        },\n\n        /**\n         * Reload sections on ajax complete\n         *\n         * @param {Object} jsonResponse\n         * @param {Object} settings\n         */\n        onAjaxComplete: function (jsonResponse, settings) {\n            var sections,\n                redirects;\n\n            if (settings.type.match(/post|put|delete/i)) {\n                sections = sectionConfig.getAffectedSections(settings.url);\n\n                if (sections && sections.length) {\n                    this.invalidate(sections);\n                    redirects = ['redirect', 'backUrl'];\n\n                    if (_.isObject(jsonResponse) && !_.isEmpty(_.pick(jsonResponse, redirects))) { //eslint-disable-line\n                        return;\n                    }\n                    this.reload(sections, true);\n                }\n            }\n        },\n\n        /**\n         * @param {Object} settings\n         * @constructor\n         */\n        'Magento_Customer/js/customer-data': function (settings) {\n            options = settings;\n            customerData.initStorage();\n            invalidateCacheBySessionTimeOut(settings);\n            invalidateCacheByCloseCookieSession();\n            customerData.init();\n            deferred.resolve();\n        }\n    };\n\n    /**\n     * Events listener\n     */\n    $(document).on('ajaxComplete', function (event, xhr, settings) {\n        customerData.onAjaxComplete(xhr.responseJSON, settings);\n    });\n\n    /**\n     * Events listener\n     */\n    $(document).on('submit', function (event) {\n        var sections;\n\n        if (event.target.method.match(/post|put|delete/i)) {\n            sections = sectionConfig.getAffectedSections(event.target.action);\n\n            if (sections) {\n                customerData.invalidate(sections);\n            }\n        }\n    });\n\n    return customerData;\n});\n","Magento_Customer/js/address.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'jquery-ui-modules/widget',\n    'mage/translate'\n], function ($, confirm) {\n    'use strict';\n\n    $.widget('mage.address', {\n        /**\n         * Options common to all instances of this widget.\n         * @type {Object}\n         */\n        options: {\n            deleteConfirmMessage: $.mage.__('Are you sure you want to delete this address?')\n        },\n\n        /**\n         * Bind event handlers for adding and deleting addresses.\n         * @private\n         */\n        _create: function () {\n            var options         = this.options,\n                addAddress      = options.addAddress,\n                deleteAddress   = options.deleteAddress;\n\n            if (addAddress) {\n                $(document).on('click', addAddress, this._addAddress.bind(this));\n            }\n\n            if (deleteAddress) {\n                $(document).on('click', deleteAddress, this._deleteAddress.bind(this));\n            }\n        },\n\n        /**\n         * Add a new address.\n         * @private\n         */\n        _addAddress: function () {\n            window.location = this.options.addAddressLocation;\n        },\n\n        /**\n         * Delete the address whose id is specified in a data attribute after confirmation from the user.\n         * @private\n         * @param {jQuery.Event} e\n         * @return {Boolean}\n         */\n        _deleteAddress: function (e) {\n            var self = this;\n\n            confirm({\n                content: this.options.deleteConfirmMessage,\n                actions: {\n\n                    /** @inheritdoc */\n                    confirm: function () {\n                        if (typeof $(e.target).parent().data('address') !== 'undefined') {\n                            window.location = self.options.deleteUrlPrefix + $(e.target).parent().data('address') +\n                                '/form_key/' + $.mage.cookies.get('form_key');\n                        } else {\n                            window.location = self.options.deleteUrlPrefix + $(e.target).data('address') +\n                                '/form_key/' + $.mage.cookies.get('form_key');\n                        }\n                    }\n                }\n            });\n\n            return false;\n        }\n    });\n\n    return $.mage.address;\n});\n","Magento_Customer/js/password-strength-indicator.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Customer/js/zxcvbn',\n    'mage/translate',\n    'mage/validation'\n], function ($, zxcvbn, $t) {\n    'use strict';\n\n    $.widget('mage.passwordStrengthIndicator', {\n        options: {\n            cache: {},\n            passwordSelector: '[type=password]',\n            passwordStrengthMeterSelector: '[data-role=password-strength-meter]',\n            passwordStrengthMeterLabelSelector: '[data-role=password-strength-meter-label]',\n            formSelector: 'form',\n            emailSelector: 'input[type=\"email\"]'\n        },\n\n        /**\n         * Widget initialization\n         * @private\n         */\n        _create: function () {\n            this.options.cache.input = $(this.options.passwordSelector, this.element);\n            this.options.cache.meter = $(this.options.passwordStrengthMeterSelector, this.element);\n            this.options.cache.label = $(this.options.passwordStrengthMeterLabelSelector, this.element);\n\n            // We need to look outside the module for backward compatibility, since someone can already use the module.\n            // @todo Narrow this selector in 2.3 so it doesn't accidentally finds the email field from the\n            // newsletter email field or any other \"email\" field.\n            this.options.cache.email = $(this.options.formSelector).find(this.options.emailSelector);\n            this._bind();\n        },\n\n        /**\n         * Event binding, will monitor change, keyup and paste events.\n         * @private\n         */\n        _bind: function () {\n            this._on(this.options.cache.input, {\n                'change': this._calculateStrength,\n                'keyup': this._calculateStrength,\n                'paste': this._calculateStrength\n            });\n\n            if (this.options.cache.email.length) {\n                this._on(this.options.cache.email, {\n                    'change': this._calculateStrength,\n                    'keyup': this._calculateStrength,\n                    'paste': this._calculateStrength\n                });\n            }\n        },\n\n        /**\n         * Calculate password strength\n         * @private\n         */\n        _calculateStrength: function () {\n            var password = this._getPassword(),\n                isEmpty = password.length === 0,\n                zxcvbnScore,\n                displayScore,\n                isValid;\n\n            // Display score is based on combination of whether password is empty, valid, and zxcvbn strength\n            if (isEmpty) {\n                displayScore = 0;\n            } else {\n                this.options.cache.input.rules('add', {\n                    'password-not-equal-to-user-name': this.options.cache.email.val()\n                });\n\n                // We should only perform this check in case there is an email field on screen\n                if (this.options.cache.email.length &&\n                    password.toLowerCase() === this.options.cache.email.val().toLowerCase()) {\n                    displayScore = 1;\n                } else {\n                    isValid = $.validator.validateSingleElement(this.options.cache.input);\n                    zxcvbnScore = zxcvbn(password).score;\n                    displayScore = isValid && zxcvbnScore > 0 ? zxcvbnScore : 1;\n                }\n            }\n\n            // Update label\n            this._displayStrength(displayScore);\n        },\n\n        /**\n         * Display strength\n         * @param {Number} displayScore\n         * @private\n         */\n        _displayStrength: function (displayScore) {\n            var strengthLabel = '',\n                className;\n\n            switch (displayScore) {\n                case 0:\n                    strengthLabel = $t('No Password');\n                    className = 'password-none';\n                    break;\n\n                case 1:\n                    strengthLabel = $t('Weak');\n                    className = 'password-weak';\n                    break;\n\n                case 2:\n                    strengthLabel = $t('Medium');\n                    className = 'password-medium';\n                    break;\n\n                case 3:\n                    strengthLabel = $t('Strong');\n                    className = 'password-strong';\n                    break;\n\n                case 4:\n                    strengthLabel = $t('Very Strong');\n                    className = 'password-very-strong';\n                    break;\n            }\n\n            this.options.cache.meter\n                .removeClass()\n                .addClass(className);\n            this.options.cache.label.text(strengthLabel);\n        },\n\n        /**\n         * Get password value\n         * @returns {*}\n         * @private\n         */\n        _getPassword: function () {\n            return this.options.cache.input.val();\n        }\n    });\n\n    return $.mage.passwordStrengthIndicator;\n});\n","Magento_Customer/js/customer-global-session-loader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Customer/js/customer-data'\n], function ($, customerData) {\n    'use strict';\n\n    return function () {\n        var customer;\n\n        // When the session is available, this customer menu will be available\n        if ($('.customer-menu').length > 0) {\n            customer = customerData.get('customer');\n\n            customerData.getInitCustomerData().done(function () {\n                // Check if the customer data is set in local storage, if not reload data from server\n                if (!customer().firstname) {\n                    customerData.reload([], false);\n                }\n            });\n        }\n    };\n});\n","Magento_Customer/js/addressValidation.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'mageUtils',\n    'mage/translate',\n    'Magento_Checkout/js/model/postcode-validator',\n    'jquery-ui-modules/widget',\n    'validation'\n], function ($, __, utils, $t, postCodeValidator) {\n    'use strict';\n\n    $.widget('mage.addressValidation', {\n        options: {\n            selectors: {\n                button: '[data-action=save-address]',\n                zip: '#zip',\n                country: 'select[name=\"country_id\"]:visible'\n            }\n        },\n\n        zipInput: null,\n        countrySelect: null,\n\n        /**\n         * Validation creation\n         *\n         * @protected\n         */\n        _create: function () {\n            var button = $(this.options.selectors.button, this.element);\n\n            this.zipInput = $(this.options.selectors.zip, this.element);\n            this.countrySelect = $(this.options.selectors.country, this.element);\n\n            this.element.validation({\n\n                /**\n                 * Submit Handler\n                 * @param {Element} form - address form\n                 */\n                submitHandler: function (form) {\n\n                    button.attr('disabled', true);\n                    form.submit();\n                }\n            });\n\n            this._addPostCodeValidation();\n        },\n\n        /**\n         * Add postcode validation\n         *\n         * @protected\n         */\n        _addPostCodeValidation: function () {\n            var self = this;\n\n            this.zipInput.on('keyup', __.debounce(function (event) {\n                    var valid = self._validatePostCode(event.target.value);\n\n                    self._renderValidationResult(valid);\n                }, 500)\n            );\n\n            this.countrySelect.on('change', function () {\n                var valid = self._validatePostCode(self.zipInput.val());\n\n                self._renderValidationResult(valid);\n            });\n        },\n\n        /**\n         * Validate post code value.\n         *\n         * @protected\n         * @param {String} postCode - post code\n         * @return {Boolean} Whether is post code valid\n         */\n        _validatePostCode: function (postCode) {\n            var countryId = this.countrySelect.val();\n\n            if (postCode === null) {\n                return true;\n            }\n\n            return postCodeValidator.validate(postCode, countryId, this.options.postCodes);\n        },\n\n        /**\n         * Renders warning messages for invalid post code.\n         *\n         * @protected\n         * @param {Boolean} valid\n         */\n        _renderValidationResult: function (valid) {\n            var warnMessage,\n                alertDiv = this.zipInput.next();\n\n            if (!valid) {\n                warnMessage = $t('Provided Zip/Postal Code seems to be invalid.');\n\n                if (postCodeValidator.validatedPostCodeExample.length) {\n                    warnMessage += $t(' Example: ') + postCodeValidator.validatedPostCodeExample.join('; ') + '. ';\n                }\n                warnMessage += $t('If you believe it is the right one you can ignore this notice.');\n            }\n\n            alertDiv.children(':first').text(warnMessage);\n\n            if (valid) {\n                alertDiv.hide();\n            } else {\n                alertDiv.show();\n            }\n        }\n    });\n\n    return $.mage.addressValidation;\n});\n","Magento_Customer/js/invalidation-processor.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'underscore',\n    'uiElement',\n    'Magento_Customer/js/customer-data'\n], function (_, Element, customerData) {\n    'use strict';\n\n    return Element.extend({\n        /**\n         * Initialize object\n         */\n        initialize: function () {\n            this._super();\n            this.process(customerData);\n        },\n\n        /**\n         * Process all rules in loop, each rule can invalidate some sections in customer data\n         *\n         * @param {Object} customerDataObject\n         */\n        process: function (customerDataObject) {\n            _.each(this.invalidationRules, function (rule, ruleName) {\n                _.each(rule, function (ruleArgs, rulePath) {\n                    require([rulePath], function (Rule) {\n                        var currentRule = new Rule(ruleArgs);\n\n                        if (!_.isFunction(currentRule.process)) {\n                            throw new Error('Rule ' + ruleName + ' should implement invalidationProcessor interface');\n                        }\n                        currentRule.process(customerDataObject);\n                    });\n                });\n            });\n        }\n    });\n});\n","Magento_Customer/js/invalidation-rules/website-rule.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiClass'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n\n        defaults: {\n            scopeConfig: {}\n        },\n\n        /**\n         * Takes website id from current customer data and compare it with current website id\n         * If customer belongs to another scope, we need to invalidate current section\n         *\n         * @param {Object} customerData\n         */\n        process: function (customerData) {\n            var customer = customerData.get('customer');\n\n            if (this.scopeConfig && customer() &&\n                ~~customer().websiteId !== ~~this.scopeConfig.websiteId && ~~customer().websiteId !== 0) {\n                customerData.reload(['customer']);\n            }\n        }\n    });\n});\n","Magento_Customer/js/view/customer.js":"/**\n* Copyright \u00a9 Magento, Inc. All rights reserved.\n* See COPYING.txt for license details.\n*/\n\ndefine([\n    'uiComponent',\n    'Magento_Customer/js/customer-data'\n], function (Component, customerData) {\n    'use strict';\n\n    return Component.extend({\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            this.customer = customerData.get('customer');\n        }\n    });\n});\n","Magento_Customer/js/view/authentication-popup.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'Magento_Ui/js/form/form',\n    'Magento_Customer/js/action/login',\n    'Magento_Customer/js/customer-data',\n    'Magento_Customer/js/model/authentication-popup',\n    'mage/translate',\n    'mage/url',\n    'Magento_Ui/js/modal/alert',\n    'mage/validation'\n], function ($, ko, Component, loginAction, customerData, authenticationPopup, $t, url, alert) {\n    'use strict';\n\n    return Component.extend({\n        registerUrl: window.authenticationPopup.customerRegisterUrl,\n        forgotPasswordUrl: window.authenticationPopup.customerForgotPasswordUrl,\n        autocomplete: window.authenticationPopup.autocomplete,\n        modalWindow: null,\n        isLoading: ko.observable(false),\n\n        defaults: {\n            template: 'Magento_Customer/authentication-popup'\n        },\n\n        /**\n         * Init\n         */\n        initialize: function () {\n            var self = this;\n\n            this._super();\n            url.setBaseUrl(window.authenticationPopup.baseUrl);\n            loginAction.registerLoginCallback(function () {\n                self.isLoading(false);\n            });\n        },\n\n        /**\n         * Sets modal on given HTML element with on demand initialization.\n         */\n        setModalElement: function (element) {\n            var cart = customerData.get('cart');\n\n            if (cart().isGuestCheckoutAllowed === false) {\n                this.createPopup(element);\n            } else {\n                cart.subscribe(function (cartData) {\n                    if (cartData.isGuestCheckoutAllowed === false) {\n                        this.createPopup(element);\n                    }\n                }, this);\n            }\n        },\n\n        /**\n         * Initializes authentication modal on given HTML element.\n         */\n        createPopup: function (element) {\n            if (authenticationPopup.modalWindow == null) {\n                authenticationPopup.createPopUp(element);\n            }\n        },\n\n        /** Is login form enabled for current customer */\n        isActive: function () {\n            var customer = customerData.get('customer');\n\n            return customer() == false; //eslint-disable-line eqeqeq\n        },\n\n        /** Show login popup window */\n        showModal: function () {\n            if (this.modalWindow) {\n                $(this.modalWindow).modal('openModal');\n            } else {\n                alert({\n                    content: $t('Guest checkout is disabled.')\n                });\n            }\n        },\n\n        /**\n         * Provide login action\n         *\n         * @return {Boolean}\n         */\n        login: function (formUiElement, event) {\n            var loginData = {},\n                formElement = $(event.currentTarget),\n                formDataArray = formElement.serializeArray();\n\n            event.stopPropagation();\n            formDataArray.forEach(function (entry) {\n                loginData[entry.name] = entry.value;\n            });\n            loginData['customerLoginUrl'] = window.authenticationPopup.customerLoginUrl;\n            if (formElement.validation() &&\n                formElement.validation('isValid')\n            ) {\n                this.isLoading(true);\n                loginAction(loginData);\n            }\n\n            return false;\n        }\n    });\n});\n","Magento_Customer/js/model/address-list.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'ko',\n    './customer-addresses'\n], function (ko, defaultProvider) {\n    'use strict';\n\n    return ko.observableArray(defaultProvider.getAddressItems());\n});\n","Magento_Customer/js/model/customer.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'ko',\n    'underscore',\n    './address-list'\n], function ($, ko, _, addressList) {\n    'use strict';\n\n    var isLoggedIn = ko.observable(window.isCustomerLoggedIn),\n        customerData = {};\n\n    if (isLoggedIn()) {\n        customerData = window.customerData;\n    } else {\n        customerData = {};\n    }\n\n    return {\n        customerData: customerData,\n        customerDetails: {},\n        isLoggedIn: isLoggedIn,\n\n        /**\n         * @param {Boolean} flag\n         */\n        setIsLoggedIn: function (flag) {\n            isLoggedIn(flag);\n        },\n\n        /**\n         * @return {Array}\n         */\n        getBillingAddressList: function () {\n            return addressList();\n        },\n\n        /**\n         * @return {Array}\n         */\n        getShippingAddressList: function () {\n            return addressList();\n        },\n\n        /**\n         * @param {String} fieldName\n         * @param {*} value\n         */\n        setDetails: function (fieldName, value) {\n            if (fieldName) {\n                this.customerDetails[fieldName] = value;\n            }\n        },\n\n        /**\n         * @param {String} fieldName\n         * @return {*}\n         */\n        getDetails: function (fieldName) {\n            if (fieldName) {\n                if (this.customerDetails.hasOwnProperty(fieldName)) {\n                    return this.customerDetails[fieldName];\n                }\n\n                return undefined;\n            }\n\n            return this.customerDetails;\n        },\n\n        /**\n         * @param {Array} address\n         * @return {Number}\n         */\n        addCustomerAddress: function (address) {\n            var fields = [\n                    'customer_id', 'country_id', 'street', 'company', 'telephone', 'fax', 'postcode', 'city',\n                    'firstname', 'lastname', 'middlename', 'prefix', 'suffix', 'vat_id', 'default_billing',\n                    'default_shipping'\n                ],\n                customerAddress = {},\n                hasAddress = 0,\n                existingAddress;\n\n            if (!this.customerData.addresses) {\n                this.customerData.addresses = [];\n            }\n\n            customerAddress = _.pick(address, fields);\n\n            if (address.hasOwnProperty('region_id')) {\n                customerAddress.region = {\n                    'region_id': address['region_id'],\n                    region: address.region\n                };\n            }\n\n            for (existingAddress in this.customerData.addresses) {\n                if (this.customerData.addresses.hasOwnProperty(existingAddress)) {\n                    if (_.isEqual(this.customerData.addresses[existingAddress], customerAddress)) { //eslint-disable-line\n                        hasAddress = existingAddress;\n                        break;\n                    }\n                }\n            }\n\n            if (hasAddress === 0) {\n                return this.customerData.addresses.push(customerAddress) - 1;\n            }\n\n            return hasAddress;\n        },\n\n        /**\n         * @param {*} addressId\n         * @return {Boolean}\n         */\n        setAddressAsDefaultBilling: function (addressId) {\n            if (this.customerData.addresses[addressId]) {\n                this.customerData.addresses[addressId]['default_billing'] = 1;\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * @param {*} addressId\n         * @return {Boolean}\n         */\n        setAddressAsDefaultShipping: function (addressId) {\n            if (this.customerData.addresses[addressId]) {\n                this.customerData.addresses[addressId]['default_shipping'] = 1;\n\n                return true;\n            }\n\n            return false;\n        }\n    };\n});\n","Magento_Customer/js/model/customer-addresses.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'ko',\n    './customer/address'\n], function ($, ko, Address) {\n    'use strict';\n\n    var isLoggedIn = ko.observable(window.isCustomerLoggedIn);\n\n    return {\n        /**\n         * @return {Array}\n         */\n        getAddressItems: function () {\n            var items = [],\n                customerData = window.customerData;\n\n            if (isLoggedIn()) {\n                if (Object.keys(customerData).length) {\n                    $.each(customerData.addresses, function (key, item) {\n                        items.push(new Address(item));\n                    });\n                }\n            }\n\n            return items;\n        }\n    };\n});\n","Magento_Customer/js/model/authentication-popup.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/modal'\n], function ($, modal) {\n    'use strict';\n\n    return {\n        modalWindow: null,\n\n        /**\n         * Create popUp window for provided element\n         *\n         * @param {HTMLElement} element\n         */\n        createPopUp: function (element) {\n            var options = {\n                'type': 'popup',\n                'modalClass': 'popup-authentication',\n                'focus': '[name=username]',\n                'responsive': true,\n                'innerScroll': true,\n                'trigger': '.proceed-to-checkout',\n                'buttons': []\n            };\n\n            this.modalWindow = element;\n            modal(options, $(this.modalWindow));\n        },\n\n        /** Show login popup window */\n        showModal: function () {\n            $(this.modalWindow).modal('openModal').trigger('contentUpdated');\n        }\n    };\n});\n","Magento_Customer/js/model/customer/address.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine(['underscore'], function (_) {\n    'use strict';\n\n    /**\n     * Returns new address object.\n     *\n     * @param {Object} addressData\n     * @return {Object}\n     */\n    return function (addressData) {\n        var regionId;\n\n        if (addressData.region['region_id'] && addressData.region['region_id'] !== '0') {\n            regionId = addressData.region['region_id'] + '';\n        }\n\n        return {\n            customerAddressId: addressData.id,\n            email: addressData.email,\n            countryId: addressData['country_id'],\n            regionId: regionId,\n            regionCode: addressData.region['region_code'],\n            region: addressData.region.region,\n            customerId: addressData['customer_id'],\n            street: addressData.street,\n            company: addressData.company,\n            telephone: addressData.telephone,\n            fax: addressData.fax,\n            postcode: addressData.postcode,\n            city: addressData.city,\n            firstname: addressData.firstname,\n            lastname: addressData.lastname,\n            middlename: addressData.middlename,\n            prefix: addressData.prefix,\n            suffix: addressData.suffix,\n            vatId: addressData['vat_id'],\n            sameAsBilling: addressData['same_as_billing'],\n            saveInAddressBook: addressData['save_in_address_book'],\n            customAttributes: _.toArray(addressData['custom_attributes']).reverse(),\n\n            /**\n             * @return {*}\n             */\n            isDefaultShipping: function () {\n                return addressData['default_shipping'];\n            },\n\n            /**\n             * @return {*}\n             */\n            isDefaultBilling: function () {\n                return addressData['default_billing'];\n            },\n\n            /**\n             * @return {*}\n             */\n            getAddressInline: function () {\n                return addressData.inline;\n            },\n\n            /**\n             * @return {String}\n             */\n            getType: function () {\n                return 'customer-address';\n            },\n\n            /**\n             * @return {String}\n             */\n            getKey: function () {\n                return this.getType() + this.customerAddressId;\n            },\n\n            /**\n             * @return {String}\n             */\n            getCacheKey: function () {\n                return this.getKey();\n            },\n\n            /**\n             * @return {Boolean}\n             */\n            isEditable: function () {\n                return false;\n            },\n\n            /**\n             * @return {Boolean}\n             */\n            canUseForBilling: function () {\n                return true;\n            }\n        };\n    };\n});\n","Magento_Customer/js/action/check-email-availability.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'mage/storage',\n    'Magento_Checkout/js/model/url-builder'\n], function (storage, urlBuilder) {\n    'use strict';\n\n    return function (deferred, email) {\n        return storage.post(\n            urlBuilder.createUrl('/customers/isEmailAvailable', {}),\n            JSON.stringify({\n                customerEmail: email\n            }),\n            false\n        ).done(function (isEmailAvailable) {\n            if (isEmailAvailable) {\n                deferred.resolve();\n            } else {\n                deferred.reject();\n            }\n        }).fail(function () {\n            deferred.reject();\n        });\n    };\n});\n","Magento_Customer/js/action/login.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/storage',\n    'Magento_Ui/js/model/messageList',\n    'Magento_Customer/js/customer-data',\n    'mage/translate'\n], function ($, storage, globalMessageList, customerData, $t) {\n    'use strict';\n\n    var callbacks = [],\n\n        /**\n         * @param {Object} loginData\n         * @param {String} redirectUrl\n         * @param {*} isGlobal\n         * @param {Object} messageContainer\n         */\n        action = function (loginData, redirectUrl, isGlobal, messageContainer) {\n            messageContainer = messageContainer || globalMessageList;\n            let customerLoginUrl = 'customer/ajax/login';\n\n            if (loginData.customerLoginUrl) {\n                customerLoginUrl = loginData.customerLoginUrl;\n                delete loginData.customerLoginUrl;\n            }\n\n            return storage.post(\n                customerLoginUrl,\n                JSON.stringify(loginData),\n                isGlobal\n            ).done(function (response) {\n                if (response.errors) {\n                    messageContainer.addErrorMessage(response);\n                    callbacks.forEach(function (callback) {\n                        callback(loginData);\n                    });\n                } else {\n                    callbacks.forEach(function (callback) {\n                        callback(loginData);\n                    });\n                    customerData.invalidate(['customer']);\n\n                    if (response.redirectUrl) {\n                        window.location.href = response.redirectUrl;\n                    } else if (redirectUrl) {\n                        window.location.href = redirectUrl;\n                    } else {\n                        location.reload();\n                    }\n                }\n            }).fail(function () {\n                messageContainer.addErrorMessage({\n                    'message': $t('Could not authenticate. Please try again later')\n                });\n                callbacks.forEach(function (callback) {\n                    callback(loginData);\n                });\n            });\n        };\n\n    /**\n     * @param {Function} callback\n     */\n    action.registerLoginCallback = function (callback) {\n        callbacks.push(callback);\n    };\n\n    return action;\n});\n"}
}});
